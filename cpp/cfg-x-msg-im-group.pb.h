// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-im-group.proto

#ifndef PROTOBUF_cfg_2dx_2dmsg_2dim_2dgroup_2eproto__INCLUDED
#define PROTOBUF_cfg_2dx_2dmsg_2dim_2dgroup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsXmsgImGroupCfgPbImpl();
void InitDefaultsXmsgImGroupCfgPb();
void InitDefaultsXmsgImGroupCfgMongodbImpl();
void InitDefaultsXmsgImGroupCfgMongodb();
void InitDefaultsXmsgImGroupCfgMysqlImpl();
void InitDefaultsXmsgImGroupCfgMysql();
void InitDefaultsXmsgImGroupCfgLogImpl();
void InitDefaultsXmsgImGroupCfgLog();
void InitDefaultsXmsgImGroupCfgXscTcpServerImpl();
void InitDefaultsXmsgImGroupCfgXscTcpServer();
void InitDefaultsXmsgImGroupCfgXmsgNeH2nAddrImpl();
void InitDefaultsXmsgImGroupCfgXmsgNeH2nAddr();
void InitDefaultsXmsgImGroupCfgXmsgNeN2hAddrImpl();
void InitDefaultsXmsgImGroupCfgXmsgNeN2hAddr();
void InitDefaultsXmsgImGroupCfgMiscImpl();
void InitDefaultsXmsgImGroupCfgMisc();
inline void InitDefaults() {
  InitDefaultsXmsgImGroupCfgPb();
  InitDefaultsXmsgImGroupCfgMongodb();
  InitDefaultsXmsgImGroupCfgMysql();
  InitDefaultsXmsgImGroupCfgLog();
  InitDefaultsXmsgImGroupCfgXscTcpServer();
  InitDefaultsXmsgImGroupCfgXmsgNeH2nAddr();
  InitDefaultsXmsgImGroupCfgXmsgNeN2hAddr();
  InitDefaultsXmsgImGroupCfgMisc();
}
}  // namespace protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto
class XmsgImGroupCfgLog;
class XmsgImGroupCfgLogDefaultTypeInternal;
extern XmsgImGroupCfgLogDefaultTypeInternal _XmsgImGroupCfgLog_default_instance_;
class XmsgImGroupCfgMisc;
class XmsgImGroupCfgMiscDefaultTypeInternal;
extern XmsgImGroupCfgMiscDefaultTypeInternal _XmsgImGroupCfgMisc_default_instance_;
class XmsgImGroupCfgMongodb;
class XmsgImGroupCfgMongodbDefaultTypeInternal;
extern XmsgImGroupCfgMongodbDefaultTypeInternal _XmsgImGroupCfgMongodb_default_instance_;
class XmsgImGroupCfgMysql;
class XmsgImGroupCfgMysqlDefaultTypeInternal;
extern XmsgImGroupCfgMysqlDefaultTypeInternal _XmsgImGroupCfgMysql_default_instance_;
class XmsgImGroupCfgPb;
class XmsgImGroupCfgPbDefaultTypeInternal;
extern XmsgImGroupCfgPbDefaultTypeInternal _XmsgImGroupCfgPb_default_instance_;
class XmsgImGroupCfgXmsgNeH2nAddr;
class XmsgImGroupCfgXmsgNeH2nAddrDefaultTypeInternal;
extern XmsgImGroupCfgXmsgNeH2nAddrDefaultTypeInternal _XmsgImGroupCfgXmsgNeH2nAddr_default_instance_;
class XmsgImGroupCfgXmsgNeN2hAddr;
class XmsgImGroupCfgXmsgNeN2hAddrDefaultTypeInternal;
extern XmsgImGroupCfgXmsgNeN2hAddrDefaultTypeInternal _XmsgImGroupCfgXmsgNeN2hAddr_default_instance_;
class XmsgImGroupCfgXscTcpServer;
class XmsgImGroupCfgXscTcpServerDefaultTypeInternal;
extern XmsgImGroupCfgXscTcpServerDefaultTypeInternal _XmsgImGroupCfgXscTcpServer_default_instance_;

// ===================================================================

class XmsgImGroupCfgPb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImGroupCfgPb) */ {
 public:
  XmsgImGroupCfgPb();
  virtual ~XmsgImGroupCfgPb();

  XmsgImGroupCfgPb(const XmsgImGroupCfgPb& from);

  inline XmsgImGroupCfgPb& operator=(const XmsgImGroupCfgPb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImGroupCfgPb(XmsgImGroupCfgPb&& from) noexcept
    : XmsgImGroupCfgPb() {
    *this = ::std::move(from);
  }

  inline XmsgImGroupCfgPb& operator=(XmsgImGroupCfgPb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImGroupCfgPb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImGroupCfgPb* internal_default_instance() {
    return reinterpret_cast<const XmsgImGroupCfgPb*>(
               &_XmsgImGroupCfgPb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(XmsgImGroupCfgPb* other);
  friend void swap(XmsgImGroupCfgPb& a, XmsgImGroupCfgPb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImGroupCfgPb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImGroupCfgPb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImGroupCfgPb& from);
  void MergeFrom(const XmsgImGroupCfgPb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImGroupCfgPb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .XmsgImGroupCfgXmsgNeH2nAddr h2n = 7;
  int h2n_size() const;
  void clear_h2n();
  static const int kH2NFieldNumber = 7;
  const ::XmsgImGroupCfgXmsgNeH2nAddr& h2n(int index) const;
  ::XmsgImGroupCfgXmsgNeH2nAddr* mutable_h2n(int index);
  ::XmsgImGroupCfgXmsgNeH2nAddr* add_h2n();
  ::google::protobuf::RepeatedPtrField< ::XmsgImGroupCfgXmsgNeH2nAddr >*
      mutable_h2n();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImGroupCfgXmsgNeH2nAddr >&
      h2n() const;

  // repeated .XmsgImGroupCfgXmsgNeN2hAddr n2h = 8;
  int n2h_size() const;
  void clear_n2h();
  static const int kN2HFieldNumber = 8;
  const ::XmsgImGroupCfgXmsgNeN2hAddr& n2h(int index) const;
  ::XmsgImGroupCfgXmsgNeN2hAddr* mutable_n2h(int index);
  ::XmsgImGroupCfgXmsgNeN2hAddr* add_n2h();
  ::google::protobuf::RepeatedPtrField< ::XmsgImGroupCfgXmsgNeN2hAddr >*
      mutable_n2h();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImGroupCfgXmsgNeN2hAddr >&
      n2h() const;

  // string cgt = 1;
  void clear_cgt();
  static const int kCgtFieldNumber = 1;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string cfgType = 2;
  void clear_cfgtype();
  static const int kCfgTypeFieldNumber = 2;
  const ::std::string& cfgtype() const;
  void set_cfgtype(const ::std::string& value);
  #if LANG_CXX11
  void set_cfgtype(::std::string&& value);
  #endif
  void set_cfgtype(const char* value);
  void set_cfgtype(const char* value, size_t size);
  ::std::string* mutable_cfgtype();
  ::std::string* release_cfgtype();
  void set_allocated_cfgtype(::std::string* cfgtype);

  // .XmsgImGroupCfgMongodb mongodb = 3;
  bool has_mongodb() const;
  void clear_mongodb();
  static const int kMongodbFieldNumber = 3;
  const ::XmsgImGroupCfgMongodb& mongodb() const;
  ::XmsgImGroupCfgMongodb* release_mongodb();
  ::XmsgImGroupCfgMongodb* mutable_mongodb();
  void set_allocated_mongodb(::XmsgImGroupCfgMongodb* mongodb);

  // .XmsgImGroupCfgMysql mysql = 4;
  bool has_mysql() const;
  void clear_mysql();
  static const int kMysqlFieldNumber = 4;
  const ::XmsgImGroupCfgMysql& mysql() const;
  ::XmsgImGroupCfgMysql* release_mysql();
  ::XmsgImGroupCfgMysql* mutable_mysql();
  void set_allocated_mysql(::XmsgImGroupCfgMysql* mysql);

  // .XmsgImGroupCfgLog log = 5;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 5;
  const ::XmsgImGroupCfgLog& log() const;
  ::XmsgImGroupCfgLog* release_log();
  ::XmsgImGroupCfgLog* mutable_log();
  void set_allocated_log(::XmsgImGroupCfgLog* log);

  // .XmsgImGroupCfgXscTcpServer xscTcpCfg = 6;
  bool has_xsctcpcfg() const;
  void clear_xsctcpcfg();
  static const int kXscTcpCfgFieldNumber = 6;
  const ::XmsgImGroupCfgXscTcpServer& xsctcpcfg() const;
  ::XmsgImGroupCfgXscTcpServer* release_xsctcpcfg();
  ::XmsgImGroupCfgXscTcpServer* mutable_xsctcpcfg();
  void set_allocated_xsctcpcfg(::XmsgImGroupCfgXscTcpServer* xsctcpcfg);

  // .XmsgImGroupCfgMisc misc = 9;
  bool has_misc() const;
  void clear_misc();
  static const int kMiscFieldNumber = 9;
  const ::XmsgImGroupCfgMisc& misc() const;
  ::XmsgImGroupCfgMisc* release_misc();
  ::XmsgImGroupCfgMisc* mutable_misc();
  void set_allocated_misc(::XmsgImGroupCfgMisc* misc);

  // uint64 gts = 10;
  void clear_gts();
  static const int kGtsFieldNumber = 10;
  ::google::protobuf::uint64 gts() const;
  void set_gts(::google::protobuf::uint64 value);

  // uint64 uts = 11;
  void clear_uts();
  static const int kUtsFieldNumber = 11;
  ::google::protobuf::uint64 uts() const;
  void set_uts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:XmsgImGroupCfgPb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImGroupCfgXmsgNeH2nAddr > h2n_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImGroupCfgXmsgNeN2hAddr > n2h_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr cfgtype_;
  ::XmsgImGroupCfgMongodb* mongodb_;
  ::XmsgImGroupCfgMysql* mysql_;
  ::XmsgImGroupCfgLog* log_;
  ::XmsgImGroupCfgXscTcpServer* xsctcpcfg_;
  ::XmsgImGroupCfgMisc* misc_;
  ::google::protobuf::uint64 gts_;
  ::google::protobuf::uint64 uts_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgPbImpl();
};
// -------------------------------------------------------------------

class XmsgImGroupCfgMongodb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImGroupCfgMongodb) */ {
 public:
  XmsgImGroupCfgMongodb();
  virtual ~XmsgImGroupCfgMongodb();

  XmsgImGroupCfgMongodb(const XmsgImGroupCfgMongodb& from);

  inline XmsgImGroupCfgMongodb& operator=(const XmsgImGroupCfgMongodb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImGroupCfgMongodb(XmsgImGroupCfgMongodb&& from) noexcept
    : XmsgImGroupCfgMongodb() {
    *this = ::std::move(from);
  }

  inline XmsgImGroupCfgMongodb& operator=(XmsgImGroupCfgMongodb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImGroupCfgMongodb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImGroupCfgMongodb* internal_default_instance() {
    return reinterpret_cast<const XmsgImGroupCfgMongodb*>(
               &_XmsgImGroupCfgMongodb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(XmsgImGroupCfgMongodb* other);
  friend void swap(XmsgImGroupCfgMongodb& a, XmsgImGroupCfgMongodb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImGroupCfgMongodb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImGroupCfgMongodb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImGroupCfgMongodb& from);
  void MergeFrom(const XmsgImGroupCfgMongodb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImGroupCfgMongodb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:XmsgImGroupCfgMongodb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgMongodbImpl();
};
// -------------------------------------------------------------------

class XmsgImGroupCfgMysql : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImGroupCfgMysql) */ {
 public:
  XmsgImGroupCfgMysql();
  virtual ~XmsgImGroupCfgMysql();

  XmsgImGroupCfgMysql(const XmsgImGroupCfgMysql& from);

  inline XmsgImGroupCfgMysql& operator=(const XmsgImGroupCfgMysql& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImGroupCfgMysql(XmsgImGroupCfgMysql&& from) noexcept
    : XmsgImGroupCfgMysql() {
    *this = ::std::move(from);
  }

  inline XmsgImGroupCfgMysql& operator=(XmsgImGroupCfgMysql&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImGroupCfgMysql& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImGroupCfgMysql* internal_default_instance() {
    return reinterpret_cast<const XmsgImGroupCfgMysql*>(
               &_XmsgImGroupCfgMysql_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(XmsgImGroupCfgMysql* other);
  friend void swap(XmsgImGroupCfgMysql& a, XmsgImGroupCfgMysql& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImGroupCfgMysql* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImGroupCfgMysql* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImGroupCfgMysql& from);
  void MergeFrom(const XmsgImGroupCfgMysql& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImGroupCfgMysql* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string db = 3;
  void clear_db();
  static const int kDbFieldNumber = 3;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // string usr = 4;
  void clear_usr();
  static const int kUsrFieldNumber = 4;
  const ::std::string& usr() const;
  void set_usr(const ::std::string& value);
  #if LANG_CXX11
  void set_usr(::std::string&& value);
  #endif
  void set_usr(const char* value);
  void set_usr(const char* value, size_t size);
  ::std::string* mutable_usr();
  ::std::string* release_usr();
  void set_allocated_usr(::std::string* usr);

  // string password = 5;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 poolSize = 6;
  void clear_poolsize();
  static const int kPoolSizeFieldNumber = 6;
  ::google::protobuf::uint32 poolsize() const;
  void set_poolsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImGroupCfgMysql)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr usr_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 poolsize_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgMysqlImpl();
};
// -------------------------------------------------------------------

class XmsgImGroupCfgLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImGroupCfgLog) */ {
 public:
  XmsgImGroupCfgLog();
  virtual ~XmsgImGroupCfgLog();

  XmsgImGroupCfgLog(const XmsgImGroupCfgLog& from);

  inline XmsgImGroupCfgLog& operator=(const XmsgImGroupCfgLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImGroupCfgLog(XmsgImGroupCfgLog&& from) noexcept
    : XmsgImGroupCfgLog() {
    *this = ::std::move(from);
  }

  inline XmsgImGroupCfgLog& operator=(XmsgImGroupCfgLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImGroupCfgLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImGroupCfgLog* internal_default_instance() {
    return reinterpret_cast<const XmsgImGroupCfgLog*>(
               &_XmsgImGroupCfgLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(XmsgImGroupCfgLog* other);
  friend void swap(XmsgImGroupCfgLog& a, XmsgImGroupCfgLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImGroupCfgLog* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImGroupCfgLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImGroupCfgLog& from);
  void MergeFrom(const XmsgImGroupCfgLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImGroupCfgLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  const ::std::string& level() const;
  void set_level(const ::std::string& value);
  #if LANG_CXX11
  void set_level(::std::string&& value);
  #endif
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  ::std::string* mutable_level();
  ::std::string* release_level();
  void set_allocated_level(::std::string* level);

  // string output = 2;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::std::string& output() const;
  void set_output(const ::std::string& value);
  #if LANG_CXX11
  void set_output(::std::string&& value);
  #endif
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  ::std::string* mutable_output();
  ::std::string* release_output();
  void set_allocated_output(::std::string* output);

  // @@protoc_insertion_point(class_scope:XmsgImGroupCfgLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr level_;
  ::google::protobuf::internal::ArenaStringPtr output_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgLogImpl();
};
// -------------------------------------------------------------------

class XmsgImGroupCfgXscTcpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImGroupCfgXscTcpServer) */ {
 public:
  XmsgImGroupCfgXscTcpServer();
  virtual ~XmsgImGroupCfgXscTcpServer();

  XmsgImGroupCfgXscTcpServer(const XmsgImGroupCfgXscTcpServer& from);

  inline XmsgImGroupCfgXscTcpServer& operator=(const XmsgImGroupCfgXscTcpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImGroupCfgXscTcpServer(XmsgImGroupCfgXscTcpServer&& from) noexcept
    : XmsgImGroupCfgXscTcpServer() {
    *this = ::std::move(from);
  }

  inline XmsgImGroupCfgXscTcpServer& operator=(XmsgImGroupCfgXscTcpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImGroupCfgXscTcpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImGroupCfgXscTcpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgImGroupCfgXscTcpServer*>(
               &_XmsgImGroupCfgXscTcpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(XmsgImGroupCfgXscTcpServer* other);
  friend void swap(XmsgImGroupCfgXscTcpServer& a, XmsgImGroupCfgXscTcpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImGroupCfgXscTcpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImGroupCfgXscTcpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImGroupCfgXscTcpServer& from);
  void MergeFrom(const XmsgImGroupCfgXscTcpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImGroupCfgXscTcpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // uint32 worker = 2;
  void clear_worker();
  static const int kWorkerFieldNumber = 2;
  ::google::protobuf::uint32 worker() const;
  void set_worker(::google::protobuf::uint32 value);

  // uint32 peerLimit = 3;
  void clear_peerlimit();
  static const int kPeerLimitFieldNumber = 3;
  ::google::protobuf::uint32 peerlimit() const;
  void set_peerlimit(::google::protobuf::uint32 value);

  // uint32 peerMtu = 4;
  void clear_peermtu();
  static const int kPeerMtuFieldNumber = 4;
  ::google::protobuf::uint32 peermtu() const;
  void set_peermtu(::google::protobuf::uint32 value);

  // uint32 peerRcvBuf = 5;
  void clear_peerrcvbuf();
  static const int kPeerRcvBufFieldNumber = 5;
  ::google::protobuf::uint32 peerrcvbuf() const;
  void set_peerrcvbuf(::google::protobuf::uint32 value);

  // uint32 peerSndBuf = 6;
  void clear_peersndbuf();
  static const int kPeerSndBufFieldNumber = 6;
  ::google::protobuf::uint32 peersndbuf() const;
  void set_peersndbuf(::google::protobuf::uint32 value);

  // uint32 lazyClose = 7;
  void clear_lazyclose();
  static const int kLazyCloseFieldNumber = 7;
  ::google::protobuf::uint32 lazyclose() const;
  void set_lazyclose(::google::protobuf::uint32 value);

  // uint32 heartbeat = 9;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 9;
  ::google::protobuf::uint32 heartbeat() const;
  void set_heartbeat(::google::protobuf::uint32 value);

  // uint32 n2hZombie = 10;
  void clear_n2hzombie();
  static const int kN2HZombieFieldNumber = 10;
  ::google::protobuf::uint32 n2hzombie() const;
  void set_n2hzombie(::google::protobuf::uint32 value);

  // bool tracing = 8;
  void clear_tracing();
  static const int kTracingFieldNumber = 8;
  bool tracing() const;
  void set_tracing(bool value);

  // bool n2hTracing = 12;
  void clear_n2htracing();
  static const int kN2HTracingFieldNumber = 12;
  bool n2htracing() const;
  void set_n2htracing(bool value);

  // uint32 n2hTransTimeout = 11;
  void clear_n2htranstimeout();
  static const int kN2HTransTimeoutFieldNumber = 11;
  ::google::protobuf::uint32 n2htranstimeout() const;
  void set_n2htranstimeout(::google::protobuf::uint32 value);

  // uint32 h2nReConn = 13;
  void clear_h2nreconn();
  static const int kH2NReConnFieldNumber = 13;
  ::google::protobuf::uint32 h2nreconn() const;
  void set_h2nreconn(::google::protobuf::uint32 value);

  // uint32 h2nTransTimeout = 14;
  void clear_h2ntranstimeout();
  static const int kH2NTransTimeoutFieldNumber = 14;
  ::google::protobuf::uint32 h2ntranstimeout() const;
  void set_h2ntranstimeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImGroupCfgXscTcpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint32 worker_;
  ::google::protobuf::uint32 peerlimit_;
  ::google::protobuf::uint32 peermtu_;
  ::google::protobuf::uint32 peerrcvbuf_;
  ::google::protobuf::uint32 peersndbuf_;
  ::google::protobuf::uint32 lazyclose_;
  ::google::protobuf::uint32 heartbeat_;
  ::google::protobuf::uint32 n2hzombie_;
  bool tracing_;
  bool n2htracing_;
  ::google::protobuf::uint32 n2htranstimeout_;
  ::google::protobuf::uint32 h2nreconn_;
  ::google::protobuf::uint32 h2ntranstimeout_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgXscTcpServerImpl();
};
// -------------------------------------------------------------------

class XmsgImGroupCfgXmsgNeH2nAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImGroupCfgXmsgNeH2nAddr) */ {
 public:
  XmsgImGroupCfgXmsgNeH2nAddr();
  virtual ~XmsgImGroupCfgXmsgNeH2nAddr();

  XmsgImGroupCfgXmsgNeH2nAddr(const XmsgImGroupCfgXmsgNeH2nAddr& from);

  inline XmsgImGroupCfgXmsgNeH2nAddr& operator=(const XmsgImGroupCfgXmsgNeH2nAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImGroupCfgXmsgNeH2nAddr(XmsgImGroupCfgXmsgNeH2nAddr&& from) noexcept
    : XmsgImGroupCfgXmsgNeH2nAddr() {
    *this = ::std::move(from);
  }

  inline XmsgImGroupCfgXmsgNeH2nAddr& operator=(XmsgImGroupCfgXmsgNeH2nAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImGroupCfgXmsgNeH2nAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImGroupCfgXmsgNeH2nAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgImGroupCfgXmsgNeH2nAddr*>(
               &_XmsgImGroupCfgXmsgNeH2nAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(XmsgImGroupCfgXmsgNeH2nAddr* other);
  friend void swap(XmsgImGroupCfgXmsgNeH2nAddr& a, XmsgImGroupCfgXmsgNeH2nAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImGroupCfgXmsgNeH2nAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImGroupCfgXmsgNeH2nAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImGroupCfgXmsgNeH2nAddr& from);
  void MergeFrom(const XmsgImGroupCfgXmsgNeH2nAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImGroupCfgXmsgNeH2nAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string alg = 4;
  void clear_alg();
  static const int kAlgFieldNumber = 4;
  const ::std::string& alg() const;
  void set_alg(const ::std::string& value);
  #if LANG_CXX11
  void set_alg(::std::string&& value);
  #endif
  void set_alg(const char* value);
  void set_alg(const char* value, size_t size);
  ::std::string* mutable_alg();
  ::std::string* release_alg();
  void set_allocated_alg(::std::string* alg);

  // uint32 redundant = 5;
  void clear_redundant();
  static const int kRedundantFieldNumber = 5;
  ::google::protobuf::uint32 redundant() const;
  void set_redundant(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImGroupCfgXmsgNeH2nAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr alg_;
  ::google::protobuf::uint32 redundant_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgXmsgNeH2nAddrImpl();
};
// -------------------------------------------------------------------

class XmsgImGroupCfgXmsgNeN2hAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImGroupCfgXmsgNeN2hAddr) */ {
 public:
  XmsgImGroupCfgXmsgNeN2hAddr();
  virtual ~XmsgImGroupCfgXmsgNeN2hAddr();

  XmsgImGroupCfgXmsgNeN2hAddr(const XmsgImGroupCfgXmsgNeN2hAddr& from);

  inline XmsgImGroupCfgXmsgNeN2hAddr& operator=(const XmsgImGroupCfgXmsgNeN2hAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImGroupCfgXmsgNeN2hAddr(XmsgImGroupCfgXmsgNeN2hAddr&& from) noexcept
    : XmsgImGroupCfgXmsgNeN2hAddr() {
    *this = ::std::move(from);
  }

  inline XmsgImGroupCfgXmsgNeN2hAddr& operator=(XmsgImGroupCfgXmsgNeN2hAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImGroupCfgXmsgNeN2hAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImGroupCfgXmsgNeN2hAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgImGroupCfgXmsgNeN2hAddr*>(
               &_XmsgImGroupCfgXmsgNeN2hAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(XmsgImGroupCfgXmsgNeN2hAddr* other);
  friend void swap(XmsgImGroupCfgXmsgNeN2hAddr& a, XmsgImGroupCfgXmsgNeN2hAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImGroupCfgXmsgNeN2hAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImGroupCfgXmsgNeN2hAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImGroupCfgXmsgNeN2hAddr& from);
  void MergeFrom(const XmsgImGroupCfgXmsgNeN2hAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImGroupCfgXmsgNeN2hAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string cgt = 2;
  void clear_cgt();
  static const int kCgtFieldNumber = 2;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string addr = 4;
  void clear_addr();
  static const int kAddrFieldNumber = 4;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgImGroupCfgXmsgNeN2hAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgXmsgNeN2hAddrImpl();
};
// -------------------------------------------------------------------

class XmsgImGroupCfgMisc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImGroupCfgMisc) */ {
 public:
  XmsgImGroupCfgMisc();
  virtual ~XmsgImGroupCfgMisc();

  XmsgImGroupCfgMisc(const XmsgImGroupCfgMisc& from);

  inline XmsgImGroupCfgMisc& operator=(const XmsgImGroupCfgMisc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImGroupCfgMisc(XmsgImGroupCfgMisc&& from) noexcept
    : XmsgImGroupCfgMisc() {
    *this = ::std::move(from);
  }

  inline XmsgImGroupCfgMisc& operator=(XmsgImGroupCfgMisc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImGroupCfgMisc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImGroupCfgMisc* internal_default_instance() {
    return reinterpret_cast<const XmsgImGroupCfgMisc*>(
               &_XmsgImGroupCfgMisc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(XmsgImGroupCfgMisc* other);
  friend void swap(XmsgImGroupCfgMisc& a, XmsgImGroupCfgMisc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImGroupCfgMisc* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImGroupCfgMisc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImGroupCfgMisc& from);
  void MergeFrom(const XmsgImGroupCfgMisc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImGroupCfgMisc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hlr = 4;
  void clear_hlr();
  static const int kHlrFieldNumber = 4;
  const ::std::string& hlr() const;
  void set_hlr(const ::std::string& value);
  #if LANG_CXX11
  void set_hlr(::std::string&& value);
  #endif
  void set_hlr(const char* value);
  void set_hlr(const char* value, size_t size);
  ::std::string* mutable_hlr();
  ::std::string* release_hlr();
  void set_allocated_hlr(::std::string* hlr);

  // uint32 receivedMode = 1;
  void clear_receivedmode();
  static const int kReceivedModeFieldNumber = 1;
  ::google::protobuf::uint32 receivedmode() const;
  void set_receivedmode(::google::protobuf::uint32 value);

  // uint32 groupMsgSaveBatchSize = 2;
  void clear_groupmsgsavebatchsize();
  static const int kGroupMsgSaveBatchSizeFieldNumber = 2;
  ::google::protobuf::uint32 groupmsgsavebatchsize() const;
  void set_groupmsgsavebatchsize(::google::protobuf::uint32 value);

  // uint32 verApplyCount = 3;
  void clear_verapplycount();
  static const int kVerApplyCountFieldNumber = 3;
  ::google::protobuf::uint32 verapplycount() const;
  void set_verapplycount(::google::protobuf::uint32 value);

  // uint32 groupMsgQueueLimit = 5;
  void clear_groupmsgqueuelimit();
  static const int kGroupMsgQueueLimitFieldNumber = 5;
  ::google::protobuf::uint32 groupmsgqueuelimit() const;
  void set_groupmsgqueuelimit(::google::protobuf::uint32 value);

  // uint32 groupMemberCountLimit = 6;
  void clear_groupmembercountlimit();
  static const int kGroupMemberCountLimitFieldNumber = 6;
  ::google::protobuf::uint32 groupmembercountlimit() const;
  void set_groupmembercountlimit(::google::protobuf::uint32 value);

  // uint32 groupObjInfoCached = 7;
  void clear_groupobjinfocached();
  static const int kGroupObjInfoCachedFieldNumber = 7;
  ::google::protobuf::uint32 groupobjinfocached() const;
  void set_groupobjinfocached(::google::protobuf::uint32 value);

  // uint32 groupObjInfoLru = 8;
  void clear_groupobjinfolru();
  static const int kGroupObjInfoLruFieldNumber = 8;
  ::google::protobuf::uint32 groupobjinfolru() const;
  void set_groupobjinfolru(::google::protobuf::uint32 value);

  // uint32 groupEvnQueueLimit = 9;
  void clear_groupevnqueuelimit();
  static const int kGroupEvnQueueLimitFieldNumber = 9;
  ::google::protobuf::uint32 groupevnqueuelimit() const;
  void set_groupevnqueuelimit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImGroupCfgMisc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hlr_;
  ::google::protobuf::uint32 receivedmode_;
  ::google::protobuf::uint32 groupmsgsavebatchsize_;
  ::google::protobuf::uint32 verapplycount_;
  ::google::protobuf::uint32 groupmsgqueuelimit_;
  ::google::protobuf::uint32 groupmembercountlimit_;
  ::google::protobuf::uint32 groupobjinfocached_;
  ::google::protobuf::uint32 groupobjinfolru_;
  ::google::protobuf::uint32 groupevnqueuelimit_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgMiscImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XmsgImGroupCfgPb

// string cgt = 1;
inline void XmsgImGroupCfgPb::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgPb::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgPb.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImGroupCfgPb::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgPb.cgt)
}
#if LANG_CXX11
inline void XmsgImGroupCfgPb::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgPb.cgt)
}
#endif
inline void XmsgImGroupCfgPb::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgPb.cgt)
}
inline void XmsgImGroupCfgPb::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgPb.cgt)
}
inline ::std::string* XmsgImGroupCfgPb::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgPb.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgPb::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgPb.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgPb::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgPb.cgt)
}

// string cfgType = 2;
inline void XmsgImGroupCfgPb::clear_cfgtype() {
  cfgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgPb::cfgtype() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgPb.cfgType)
  return cfgtype_.GetNoArena();
}
inline void XmsgImGroupCfgPb::set_cfgtype(const ::std::string& value) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgPb.cfgType)
}
#if LANG_CXX11
inline void XmsgImGroupCfgPb::set_cfgtype(::std::string&& value) {
  
  cfgtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgPb.cfgType)
}
#endif
inline void XmsgImGroupCfgPb::set_cfgtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgPb.cfgType)
}
inline void XmsgImGroupCfgPb::set_cfgtype(const char* value, size_t size) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgPb.cfgType)
}
inline ::std::string* XmsgImGroupCfgPb::mutable_cfgtype() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgPb.cfgType)
  return cfgtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgPb::release_cfgtype() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgPb.cfgType)
  
  return cfgtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgPb::set_allocated_cfgtype(::std::string* cfgtype) {
  if (cfgtype != NULL) {
    
  } else {
    
  }
  cfgtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfgtype);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgPb.cfgType)
}

// .XmsgImGroupCfgMongodb mongodb = 3;
inline bool XmsgImGroupCfgPb::has_mongodb() const {
  return this != internal_default_instance() && mongodb_ != NULL;
}
inline void XmsgImGroupCfgPb::clear_mongodb() {
  if (GetArenaNoVirtual() == NULL && mongodb_ != NULL) {
    delete mongodb_;
  }
  mongodb_ = NULL;
}
inline const ::XmsgImGroupCfgMongodb& XmsgImGroupCfgPb::mongodb() const {
  const ::XmsgImGroupCfgMongodb* p = mongodb_;
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgPb.mongodb)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImGroupCfgMongodb*>(
      &::_XmsgImGroupCfgMongodb_default_instance_);
}
inline ::XmsgImGroupCfgMongodb* XmsgImGroupCfgPb::release_mongodb() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgPb.mongodb)
  
  ::XmsgImGroupCfgMongodb* temp = mongodb_;
  mongodb_ = NULL;
  return temp;
}
inline ::XmsgImGroupCfgMongodb* XmsgImGroupCfgPb::mutable_mongodb() {
  
  if (mongodb_ == NULL) {
    mongodb_ = new ::XmsgImGroupCfgMongodb;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgPb.mongodb)
  return mongodb_;
}
inline void XmsgImGroupCfgPb::set_allocated_mongodb(::XmsgImGroupCfgMongodb* mongodb) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mongodb_;
  }
  if (mongodb) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mongodb = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mongodb, submessage_arena);
    }
    
  } else {
    
  }
  mongodb_ = mongodb;
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgPb.mongodb)
}

// .XmsgImGroupCfgMysql mysql = 4;
inline bool XmsgImGroupCfgPb::has_mysql() const {
  return this != internal_default_instance() && mysql_ != NULL;
}
inline void XmsgImGroupCfgPb::clear_mysql() {
  if (GetArenaNoVirtual() == NULL && mysql_ != NULL) {
    delete mysql_;
  }
  mysql_ = NULL;
}
inline const ::XmsgImGroupCfgMysql& XmsgImGroupCfgPb::mysql() const {
  const ::XmsgImGroupCfgMysql* p = mysql_;
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgPb.mysql)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImGroupCfgMysql*>(
      &::_XmsgImGroupCfgMysql_default_instance_);
}
inline ::XmsgImGroupCfgMysql* XmsgImGroupCfgPb::release_mysql() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgPb.mysql)
  
  ::XmsgImGroupCfgMysql* temp = mysql_;
  mysql_ = NULL;
  return temp;
}
inline ::XmsgImGroupCfgMysql* XmsgImGroupCfgPb::mutable_mysql() {
  
  if (mysql_ == NULL) {
    mysql_ = new ::XmsgImGroupCfgMysql;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgPb.mysql)
  return mysql_;
}
inline void XmsgImGroupCfgPb::set_allocated_mysql(::XmsgImGroupCfgMysql* mysql) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mysql_;
  }
  if (mysql) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mysql = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mysql, submessage_arena);
    }
    
  } else {
    
  }
  mysql_ = mysql;
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgPb.mysql)
}

// .XmsgImGroupCfgLog log = 5;
inline bool XmsgImGroupCfgPb::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
inline void XmsgImGroupCfgPb::clear_log() {
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
}
inline const ::XmsgImGroupCfgLog& XmsgImGroupCfgPb::log() const {
  const ::XmsgImGroupCfgLog* p = log_;
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgPb.log)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImGroupCfgLog*>(
      &::_XmsgImGroupCfgLog_default_instance_);
}
inline ::XmsgImGroupCfgLog* XmsgImGroupCfgPb::release_log() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgPb.log)
  
  ::XmsgImGroupCfgLog* temp = log_;
  log_ = NULL;
  return temp;
}
inline ::XmsgImGroupCfgLog* XmsgImGroupCfgPb::mutable_log() {
  
  if (log_ == NULL) {
    log_ = new ::XmsgImGroupCfgLog;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgPb.log)
  return log_;
}
inline void XmsgImGroupCfgPb::set_allocated_log(::XmsgImGroupCfgLog* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_;
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgPb.log)
}

// .XmsgImGroupCfgXscTcpServer xscTcpCfg = 6;
inline bool XmsgImGroupCfgPb::has_xsctcpcfg() const {
  return this != internal_default_instance() && xsctcpcfg_ != NULL;
}
inline void XmsgImGroupCfgPb::clear_xsctcpcfg() {
  if (GetArenaNoVirtual() == NULL && xsctcpcfg_ != NULL) {
    delete xsctcpcfg_;
  }
  xsctcpcfg_ = NULL;
}
inline const ::XmsgImGroupCfgXscTcpServer& XmsgImGroupCfgPb::xsctcpcfg() const {
  const ::XmsgImGroupCfgXscTcpServer* p = xsctcpcfg_;
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgPb.xscTcpCfg)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImGroupCfgXscTcpServer*>(
      &::_XmsgImGroupCfgXscTcpServer_default_instance_);
}
inline ::XmsgImGroupCfgXscTcpServer* XmsgImGroupCfgPb::release_xsctcpcfg() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgPb.xscTcpCfg)
  
  ::XmsgImGroupCfgXscTcpServer* temp = xsctcpcfg_;
  xsctcpcfg_ = NULL;
  return temp;
}
inline ::XmsgImGroupCfgXscTcpServer* XmsgImGroupCfgPb::mutable_xsctcpcfg() {
  
  if (xsctcpcfg_ == NULL) {
    xsctcpcfg_ = new ::XmsgImGroupCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgPb.xscTcpCfg)
  return xsctcpcfg_;
}
inline void XmsgImGroupCfgPb::set_allocated_xsctcpcfg(::XmsgImGroupCfgXscTcpServer* xsctcpcfg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xsctcpcfg_;
  }
  if (xsctcpcfg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xsctcpcfg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xsctcpcfg, submessage_arena);
    }
    
  } else {
    
  }
  xsctcpcfg_ = xsctcpcfg;
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgPb.xscTcpCfg)
}

// repeated .XmsgImGroupCfgXmsgNeH2nAddr h2n = 7;
inline int XmsgImGroupCfgPb::h2n_size() const {
  return h2n_.size();
}
inline void XmsgImGroupCfgPb::clear_h2n() {
  h2n_.Clear();
}
inline const ::XmsgImGroupCfgXmsgNeH2nAddr& XmsgImGroupCfgPb::h2n(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgPb.h2n)
  return h2n_.Get(index);
}
inline ::XmsgImGroupCfgXmsgNeH2nAddr* XmsgImGroupCfgPb::mutable_h2n(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgPb.h2n)
  return h2n_.Mutable(index);
}
inline ::XmsgImGroupCfgXmsgNeH2nAddr* XmsgImGroupCfgPb::add_h2n() {
  // @@protoc_insertion_point(field_add:XmsgImGroupCfgPb.h2n)
  return h2n_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImGroupCfgXmsgNeH2nAddr >*
XmsgImGroupCfgPb::mutable_h2n() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImGroupCfgPb.h2n)
  return &h2n_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImGroupCfgXmsgNeH2nAddr >&
XmsgImGroupCfgPb::h2n() const {
  // @@protoc_insertion_point(field_list:XmsgImGroupCfgPb.h2n)
  return h2n_;
}

// repeated .XmsgImGroupCfgXmsgNeN2hAddr n2h = 8;
inline int XmsgImGroupCfgPb::n2h_size() const {
  return n2h_.size();
}
inline void XmsgImGroupCfgPb::clear_n2h() {
  n2h_.Clear();
}
inline const ::XmsgImGroupCfgXmsgNeN2hAddr& XmsgImGroupCfgPb::n2h(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgPb.n2h)
  return n2h_.Get(index);
}
inline ::XmsgImGroupCfgXmsgNeN2hAddr* XmsgImGroupCfgPb::mutable_n2h(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgPb.n2h)
  return n2h_.Mutable(index);
}
inline ::XmsgImGroupCfgXmsgNeN2hAddr* XmsgImGroupCfgPb::add_n2h() {
  // @@protoc_insertion_point(field_add:XmsgImGroupCfgPb.n2h)
  return n2h_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImGroupCfgXmsgNeN2hAddr >*
XmsgImGroupCfgPb::mutable_n2h() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImGroupCfgPb.n2h)
  return &n2h_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImGroupCfgXmsgNeN2hAddr >&
XmsgImGroupCfgPb::n2h() const {
  // @@protoc_insertion_point(field_list:XmsgImGroupCfgPb.n2h)
  return n2h_;
}

// .XmsgImGroupCfgMisc misc = 9;
inline bool XmsgImGroupCfgPb::has_misc() const {
  return this != internal_default_instance() && misc_ != NULL;
}
inline void XmsgImGroupCfgPb::clear_misc() {
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
}
inline const ::XmsgImGroupCfgMisc& XmsgImGroupCfgPb::misc() const {
  const ::XmsgImGroupCfgMisc* p = misc_;
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgPb.misc)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImGroupCfgMisc*>(
      &::_XmsgImGroupCfgMisc_default_instance_);
}
inline ::XmsgImGroupCfgMisc* XmsgImGroupCfgPb::release_misc() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgPb.misc)
  
  ::XmsgImGroupCfgMisc* temp = misc_;
  misc_ = NULL;
  return temp;
}
inline ::XmsgImGroupCfgMisc* XmsgImGroupCfgPb::mutable_misc() {
  
  if (misc_ == NULL) {
    misc_ = new ::XmsgImGroupCfgMisc;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgPb.misc)
  return misc_;
}
inline void XmsgImGroupCfgPb::set_allocated_misc(::XmsgImGroupCfgMisc* misc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete misc_;
  }
  if (misc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      misc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, misc, submessage_arena);
    }
    
  } else {
    
  }
  misc_ = misc;
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgPb.misc)
}

// uint64 gts = 10;
inline void XmsgImGroupCfgPb::clear_gts() {
  gts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 XmsgImGroupCfgPb::gts() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgPb.gts)
  return gts_;
}
inline void XmsgImGroupCfgPb::set_gts(::google::protobuf::uint64 value) {
  
  gts_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgPb.gts)
}

// uint64 uts = 11;
inline void XmsgImGroupCfgPb::clear_uts() {
  uts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 XmsgImGroupCfgPb::uts() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgPb.uts)
  return uts_;
}
inline void XmsgImGroupCfgPb::set_uts(::google::protobuf::uint64 value) {
  
  uts_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgPb.uts)
}

// -------------------------------------------------------------------

// XmsgImGroupCfgMongodb

// string uri = 1;
inline void XmsgImGroupCfgMongodb::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgMongodb::uri() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMongodb.uri)
  return uri_.GetNoArena();
}
inline void XmsgImGroupCfgMongodb::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMongodb.uri)
}
#if LANG_CXX11
inline void XmsgImGroupCfgMongodb::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgMongodb.uri)
}
#endif
inline void XmsgImGroupCfgMongodb::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgMongodb.uri)
}
inline void XmsgImGroupCfgMongodb::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgMongodb.uri)
}
inline ::std::string* XmsgImGroupCfgMongodb::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgMongodb.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgMongodb::release_uri() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgMongodb.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgMongodb::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgMongodb.uri)
}

// -------------------------------------------------------------------

// XmsgImGroupCfgMysql

// string host = 1;
inline void XmsgImGroupCfgMysql::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgMysql::host() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMysql.host)
  return host_.GetNoArena();
}
inline void XmsgImGroupCfgMysql::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMysql.host)
}
#if LANG_CXX11
inline void XmsgImGroupCfgMysql::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgMysql.host)
}
#endif
inline void XmsgImGroupCfgMysql::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgMysql.host)
}
inline void XmsgImGroupCfgMysql::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgMysql.host)
}
inline ::std::string* XmsgImGroupCfgMysql::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgMysql.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgMysql::release_host() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgMysql.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgMysql::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgMysql.host)
}

// uint32 port = 2;
inline void XmsgImGroupCfgMysql::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgMysql::port() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMysql.port)
  return port_;
}
inline void XmsgImGroupCfgMysql::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMysql.port)
}

// string db = 3;
inline void XmsgImGroupCfgMysql::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgMysql::db() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMysql.db)
  return db_.GetNoArena();
}
inline void XmsgImGroupCfgMysql::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMysql.db)
}
#if LANG_CXX11
inline void XmsgImGroupCfgMysql::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgMysql.db)
}
#endif
inline void XmsgImGroupCfgMysql::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgMysql.db)
}
inline void XmsgImGroupCfgMysql::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgMysql.db)
}
inline ::std::string* XmsgImGroupCfgMysql::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgMysql.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgMysql::release_db() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgMysql.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgMysql::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgMysql.db)
}

// string usr = 4;
inline void XmsgImGroupCfgMysql::clear_usr() {
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgMysql::usr() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMysql.usr)
  return usr_.GetNoArena();
}
inline void XmsgImGroupCfgMysql::set_usr(const ::std::string& value) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMysql.usr)
}
#if LANG_CXX11
inline void XmsgImGroupCfgMysql::set_usr(::std::string&& value) {
  
  usr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgMysql.usr)
}
#endif
inline void XmsgImGroupCfgMysql::set_usr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgMysql.usr)
}
inline void XmsgImGroupCfgMysql::set_usr(const char* value, size_t size) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgMysql.usr)
}
inline ::std::string* XmsgImGroupCfgMysql::mutable_usr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgMysql.usr)
  return usr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgMysql::release_usr() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgMysql.usr)
  
  return usr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgMysql::set_allocated_usr(::std::string* usr) {
  if (usr != NULL) {
    
  } else {
    
  }
  usr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgMysql.usr)
}

// string password = 5;
inline void XmsgImGroupCfgMysql::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgMysql::password() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMysql.password)
  return password_.GetNoArena();
}
inline void XmsgImGroupCfgMysql::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMysql.password)
}
#if LANG_CXX11
inline void XmsgImGroupCfgMysql::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgMysql.password)
}
#endif
inline void XmsgImGroupCfgMysql::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgMysql.password)
}
inline void XmsgImGroupCfgMysql::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgMysql.password)
}
inline ::std::string* XmsgImGroupCfgMysql::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgMysql.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgMysql::release_password() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgMysql.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgMysql::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgMysql.password)
}

// uint32 poolSize = 6;
inline void XmsgImGroupCfgMysql::clear_poolsize() {
  poolsize_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgMysql::poolsize() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMysql.poolSize)
  return poolsize_;
}
inline void XmsgImGroupCfgMysql::set_poolsize(::google::protobuf::uint32 value) {
  
  poolsize_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMysql.poolSize)
}

// -------------------------------------------------------------------

// XmsgImGroupCfgLog

// string level = 1;
inline void XmsgImGroupCfgLog::clear_level() {
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgLog::level() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgLog.level)
  return level_.GetNoArena();
}
inline void XmsgImGroupCfgLog::set_level(const ::std::string& value) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgLog.level)
}
#if LANG_CXX11
inline void XmsgImGroupCfgLog::set_level(::std::string&& value) {
  
  level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgLog.level)
}
#endif
inline void XmsgImGroupCfgLog::set_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgLog.level)
}
inline void XmsgImGroupCfgLog::set_level(const char* value, size_t size) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgLog.level)
}
inline ::std::string* XmsgImGroupCfgLog::mutable_level() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgLog.level)
  return level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgLog::release_level() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgLog.level)
  
  return level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgLog::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    
  } else {
    
  }
  level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgLog.level)
}

// string output = 2;
inline void XmsgImGroupCfgLog::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgLog::output() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgLog.output)
  return output_.GetNoArena();
}
inline void XmsgImGroupCfgLog::set_output(const ::std::string& value) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgLog.output)
}
#if LANG_CXX11
inline void XmsgImGroupCfgLog::set_output(::std::string&& value) {
  
  output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgLog.output)
}
#endif
inline void XmsgImGroupCfgLog::set_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgLog.output)
}
inline void XmsgImGroupCfgLog::set_output(const char* value, size_t size) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgLog.output)
}
inline ::std::string* XmsgImGroupCfgLog::mutable_output() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgLog.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgLog::release_output() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgLog.output)
  
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgLog::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    
  } else {
    
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgLog.output)
}

// -------------------------------------------------------------------

// XmsgImGroupCfgXscTcpServer

// string addr = 1;
inline void XmsgImGroupCfgXscTcpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgXscTcpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgImGroupCfgXscTcpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.addr)
}
#if LANG_CXX11
inline void XmsgImGroupCfgXscTcpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgXscTcpServer.addr)
}
#endif
inline void XmsgImGroupCfgXscTcpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgXscTcpServer.addr)
}
inline void XmsgImGroupCfgXscTcpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgXscTcpServer.addr)
}
inline ::std::string* XmsgImGroupCfgXscTcpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgXscTcpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgXscTcpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgXscTcpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgXscTcpServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgXscTcpServer.addr)
}

// uint32 worker = 2;
inline void XmsgImGroupCfgXscTcpServer::clear_worker() {
  worker_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgXscTcpServer::worker() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.worker)
  return worker_;
}
inline void XmsgImGroupCfgXscTcpServer::set_worker(::google::protobuf::uint32 value) {
  
  worker_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.worker)
}

// uint32 peerLimit = 3;
inline void XmsgImGroupCfgXscTcpServer::clear_peerlimit() {
  peerlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgXscTcpServer::peerlimit() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.peerLimit)
  return peerlimit_;
}
inline void XmsgImGroupCfgXscTcpServer::set_peerlimit(::google::protobuf::uint32 value) {
  
  peerlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.peerLimit)
}

// uint32 peerMtu = 4;
inline void XmsgImGroupCfgXscTcpServer::clear_peermtu() {
  peermtu_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgXscTcpServer::peermtu() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.peerMtu)
  return peermtu_;
}
inline void XmsgImGroupCfgXscTcpServer::set_peermtu(::google::protobuf::uint32 value) {
  
  peermtu_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.peerMtu)
}

// uint32 peerRcvBuf = 5;
inline void XmsgImGroupCfgXscTcpServer::clear_peerrcvbuf() {
  peerrcvbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgXscTcpServer::peerrcvbuf() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.peerRcvBuf)
  return peerrcvbuf_;
}
inline void XmsgImGroupCfgXscTcpServer::set_peerrcvbuf(::google::protobuf::uint32 value) {
  
  peerrcvbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.peerRcvBuf)
}

// uint32 peerSndBuf = 6;
inline void XmsgImGroupCfgXscTcpServer::clear_peersndbuf() {
  peersndbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgXscTcpServer::peersndbuf() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.peerSndBuf)
  return peersndbuf_;
}
inline void XmsgImGroupCfgXscTcpServer::set_peersndbuf(::google::protobuf::uint32 value) {
  
  peersndbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.peerSndBuf)
}

// uint32 lazyClose = 7;
inline void XmsgImGroupCfgXscTcpServer::clear_lazyclose() {
  lazyclose_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgXscTcpServer::lazyclose() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.lazyClose)
  return lazyclose_;
}
inline void XmsgImGroupCfgXscTcpServer::set_lazyclose(::google::protobuf::uint32 value) {
  
  lazyclose_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.lazyClose)
}

// bool tracing = 8;
inline void XmsgImGroupCfgXscTcpServer::clear_tracing() {
  tracing_ = false;
}
inline bool XmsgImGroupCfgXscTcpServer::tracing() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.tracing)
  return tracing_;
}
inline void XmsgImGroupCfgXscTcpServer::set_tracing(bool value) {
  
  tracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.tracing)
}

// uint32 heartbeat = 9;
inline void XmsgImGroupCfgXscTcpServer::clear_heartbeat() {
  heartbeat_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgXscTcpServer::heartbeat() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.heartbeat)
  return heartbeat_;
}
inline void XmsgImGroupCfgXscTcpServer::set_heartbeat(::google::protobuf::uint32 value) {
  
  heartbeat_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.heartbeat)
}

// uint32 n2hZombie = 10;
inline void XmsgImGroupCfgXscTcpServer::clear_n2hzombie() {
  n2hzombie_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgXscTcpServer::n2hzombie() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.n2hZombie)
  return n2hzombie_;
}
inline void XmsgImGroupCfgXscTcpServer::set_n2hzombie(::google::protobuf::uint32 value) {
  
  n2hzombie_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.n2hZombie)
}

// uint32 n2hTransTimeout = 11;
inline void XmsgImGroupCfgXscTcpServer::clear_n2htranstimeout() {
  n2htranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgXscTcpServer::n2htranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.n2hTransTimeout)
  return n2htranstimeout_;
}
inline void XmsgImGroupCfgXscTcpServer::set_n2htranstimeout(::google::protobuf::uint32 value) {
  
  n2htranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.n2hTransTimeout)
}

// bool n2hTracing = 12;
inline void XmsgImGroupCfgXscTcpServer::clear_n2htracing() {
  n2htracing_ = false;
}
inline bool XmsgImGroupCfgXscTcpServer::n2htracing() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.n2hTracing)
  return n2htracing_;
}
inline void XmsgImGroupCfgXscTcpServer::set_n2htracing(bool value) {
  
  n2htracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.n2hTracing)
}

// uint32 h2nReConn = 13;
inline void XmsgImGroupCfgXscTcpServer::clear_h2nreconn() {
  h2nreconn_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgXscTcpServer::h2nreconn() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.h2nReConn)
  return h2nreconn_;
}
inline void XmsgImGroupCfgXscTcpServer::set_h2nreconn(::google::protobuf::uint32 value) {
  
  h2nreconn_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.h2nReConn)
}

// uint32 h2nTransTimeout = 14;
inline void XmsgImGroupCfgXscTcpServer::clear_h2ntranstimeout() {
  h2ntranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgXscTcpServer::h2ntranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXscTcpServer.h2nTransTimeout)
  return h2ntranstimeout_;
}
inline void XmsgImGroupCfgXscTcpServer::set_h2ntranstimeout(::google::protobuf::uint32 value) {
  
  h2ntranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXscTcpServer.h2nTransTimeout)
}

// -------------------------------------------------------------------

// XmsgImGroupCfgXmsgNeH2nAddr

// string neg = 1;
inline void XmsgImGroupCfgXmsgNeH2nAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgXmsgNeH2nAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXmsgNeH2nAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXmsgNeH2nAddr.neg)
}
#if LANG_CXX11
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgXmsgNeH2nAddr.neg)
}
#endif
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgXmsgNeH2nAddr.neg)
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgXmsgNeH2nAddr.neg)
}
inline ::std::string* XmsgImGroupCfgXmsgNeH2nAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgXmsgNeH2nAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgXmsgNeH2nAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgXmsgNeH2nAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgXmsgNeH2nAddr.neg)
}

// string addr = 2;
inline void XmsgImGroupCfgXmsgNeH2nAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgXmsgNeH2nAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXmsgNeH2nAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXmsgNeH2nAddr.addr)
}
#if LANG_CXX11
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgXmsgNeH2nAddr.addr)
}
#endif
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgXmsgNeH2nAddr.addr)
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgXmsgNeH2nAddr.addr)
}
inline ::std::string* XmsgImGroupCfgXmsgNeH2nAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgXmsgNeH2nAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgXmsgNeH2nAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgXmsgNeH2nAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgXmsgNeH2nAddr.addr)
}

// string pwd = 3;
inline void XmsgImGroupCfgXmsgNeH2nAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgXmsgNeH2nAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXmsgNeH2nAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXmsgNeH2nAddr.pwd)
}
#if LANG_CXX11
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgXmsgNeH2nAddr.pwd)
}
#endif
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgXmsgNeH2nAddr.pwd)
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgXmsgNeH2nAddr.pwd)
}
inline ::std::string* XmsgImGroupCfgXmsgNeH2nAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgXmsgNeH2nAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgXmsgNeH2nAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgXmsgNeH2nAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgXmsgNeH2nAddr.pwd)
}

// string alg = 4;
inline void XmsgImGroupCfgXmsgNeH2nAddr::clear_alg() {
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgXmsgNeH2nAddr::alg() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXmsgNeH2nAddr.alg)
  return alg_.GetNoArena();
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_alg(const ::std::string& value) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXmsgNeH2nAddr.alg)
}
#if LANG_CXX11
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_alg(::std::string&& value) {
  
  alg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgXmsgNeH2nAddr.alg)
}
#endif
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_alg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgXmsgNeH2nAddr.alg)
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_alg(const char* value, size_t size) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgXmsgNeH2nAddr.alg)
}
inline ::std::string* XmsgImGroupCfgXmsgNeH2nAddr::mutable_alg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgXmsgNeH2nAddr.alg)
  return alg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgXmsgNeH2nAddr::release_alg() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgXmsgNeH2nAddr.alg)
  
  return alg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_allocated_alg(::std::string* alg) {
  if (alg != NULL) {
    
  } else {
    
  }
  alg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgXmsgNeH2nAddr.alg)
}

// uint32 redundant = 5;
inline void XmsgImGroupCfgXmsgNeH2nAddr::clear_redundant() {
  redundant_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgXmsgNeH2nAddr::redundant() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXmsgNeH2nAddr.redundant)
  return redundant_;
}
inline void XmsgImGroupCfgXmsgNeH2nAddr::set_redundant(::google::protobuf::uint32 value) {
  
  redundant_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXmsgNeH2nAddr.redundant)
}

// -------------------------------------------------------------------

// XmsgImGroupCfgXmsgNeN2hAddr

// string neg = 1;
inline void XmsgImGroupCfgXmsgNeN2hAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgXmsgNeN2hAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXmsgNeN2hAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXmsgNeN2hAddr.neg)
}
#if LANG_CXX11
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgXmsgNeN2hAddr.neg)
}
#endif
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgXmsgNeN2hAddr.neg)
}
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgXmsgNeN2hAddr.neg)
}
inline ::std::string* XmsgImGroupCfgXmsgNeN2hAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgXmsgNeN2hAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgXmsgNeN2hAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgXmsgNeN2hAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgXmsgNeN2hAddr.neg)
}

// string cgt = 2;
inline void XmsgImGroupCfgXmsgNeN2hAddr::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgXmsgNeN2hAddr::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXmsgNeN2hAddr.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXmsgNeN2hAddr.cgt)
}
#if LANG_CXX11
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgXmsgNeN2hAddr.cgt)
}
#endif
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgXmsgNeN2hAddr.cgt)
}
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgXmsgNeN2hAddr.cgt)
}
inline ::std::string* XmsgImGroupCfgXmsgNeN2hAddr::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgXmsgNeN2hAddr.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgXmsgNeN2hAddr::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgXmsgNeN2hAddr.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgXmsgNeN2hAddr.cgt)
}

// string pwd = 3;
inline void XmsgImGroupCfgXmsgNeN2hAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgXmsgNeN2hAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXmsgNeN2hAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXmsgNeN2hAddr.pwd)
}
#if LANG_CXX11
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgXmsgNeN2hAddr.pwd)
}
#endif
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgXmsgNeN2hAddr.pwd)
}
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgXmsgNeN2hAddr.pwd)
}
inline ::std::string* XmsgImGroupCfgXmsgNeN2hAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgXmsgNeN2hAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgXmsgNeN2hAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgXmsgNeN2hAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgXmsgNeN2hAddr.pwd)
}

// string addr = 4;
inline void XmsgImGroupCfgXmsgNeN2hAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgXmsgNeN2hAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgXmsgNeN2hAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgXmsgNeN2hAddr.addr)
}
#if LANG_CXX11
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgXmsgNeN2hAddr.addr)
}
#endif
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgXmsgNeN2hAddr.addr)
}
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgXmsgNeN2hAddr.addr)
}
inline ::std::string* XmsgImGroupCfgXmsgNeN2hAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgXmsgNeN2hAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgXmsgNeN2hAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgXmsgNeN2hAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgXmsgNeN2hAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgXmsgNeN2hAddr.addr)
}

// -------------------------------------------------------------------

// XmsgImGroupCfgMisc

// uint32 receivedMode = 1;
inline void XmsgImGroupCfgMisc::clear_receivedmode() {
  receivedmode_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgMisc::receivedmode() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMisc.receivedMode)
  return receivedmode_;
}
inline void XmsgImGroupCfgMisc::set_receivedmode(::google::protobuf::uint32 value) {
  
  receivedmode_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMisc.receivedMode)
}

// uint32 groupMsgSaveBatchSize = 2;
inline void XmsgImGroupCfgMisc::clear_groupmsgsavebatchsize() {
  groupmsgsavebatchsize_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgMisc::groupmsgsavebatchsize() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMisc.groupMsgSaveBatchSize)
  return groupmsgsavebatchsize_;
}
inline void XmsgImGroupCfgMisc::set_groupmsgsavebatchsize(::google::protobuf::uint32 value) {
  
  groupmsgsavebatchsize_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMisc.groupMsgSaveBatchSize)
}

// uint32 verApplyCount = 3;
inline void XmsgImGroupCfgMisc::clear_verapplycount() {
  verapplycount_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgMisc::verapplycount() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMisc.verApplyCount)
  return verapplycount_;
}
inline void XmsgImGroupCfgMisc::set_verapplycount(::google::protobuf::uint32 value) {
  
  verapplycount_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMisc.verApplyCount)
}

// string hlr = 4;
inline void XmsgImGroupCfgMisc::clear_hlr() {
  hlr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImGroupCfgMisc::hlr() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMisc.hlr)
  return hlr_.GetNoArena();
}
inline void XmsgImGroupCfgMisc::set_hlr(const ::std::string& value) {
  
  hlr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMisc.hlr)
}
#if LANG_CXX11
inline void XmsgImGroupCfgMisc::set_hlr(::std::string&& value) {
  
  hlr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImGroupCfgMisc.hlr)
}
#endif
inline void XmsgImGroupCfgMisc::set_hlr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hlr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImGroupCfgMisc.hlr)
}
inline void XmsgImGroupCfgMisc::set_hlr(const char* value, size_t size) {
  
  hlr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImGroupCfgMisc.hlr)
}
inline ::std::string* XmsgImGroupCfgMisc::mutable_hlr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImGroupCfgMisc.hlr)
  return hlr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImGroupCfgMisc::release_hlr() {
  // @@protoc_insertion_point(field_release:XmsgImGroupCfgMisc.hlr)
  
  return hlr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImGroupCfgMisc::set_allocated_hlr(::std::string* hlr) {
  if (hlr != NULL) {
    
  } else {
    
  }
  hlr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hlr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImGroupCfgMisc.hlr)
}

// uint32 groupMsgQueueLimit = 5;
inline void XmsgImGroupCfgMisc::clear_groupmsgqueuelimit() {
  groupmsgqueuelimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgMisc::groupmsgqueuelimit() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMisc.groupMsgQueueLimit)
  return groupmsgqueuelimit_;
}
inline void XmsgImGroupCfgMisc::set_groupmsgqueuelimit(::google::protobuf::uint32 value) {
  
  groupmsgqueuelimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMisc.groupMsgQueueLimit)
}

// uint32 groupEvnQueueLimit = 9;
inline void XmsgImGroupCfgMisc::clear_groupevnqueuelimit() {
  groupevnqueuelimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgMisc::groupevnqueuelimit() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMisc.groupEvnQueueLimit)
  return groupevnqueuelimit_;
}
inline void XmsgImGroupCfgMisc::set_groupevnqueuelimit(::google::protobuf::uint32 value) {
  
  groupevnqueuelimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMisc.groupEvnQueueLimit)
}

// uint32 groupMemberCountLimit = 6;
inline void XmsgImGroupCfgMisc::clear_groupmembercountlimit() {
  groupmembercountlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgMisc::groupmembercountlimit() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMisc.groupMemberCountLimit)
  return groupmembercountlimit_;
}
inline void XmsgImGroupCfgMisc::set_groupmembercountlimit(::google::protobuf::uint32 value) {
  
  groupmembercountlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMisc.groupMemberCountLimit)
}

// uint32 groupObjInfoCached = 7;
inline void XmsgImGroupCfgMisc::clear_groupobjinfocached() {
  groupobjinfocached_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgMisc::groupobjinfocached() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMisc.groupObjInfoCached)
  return groupobjinfocached_;
}
inline void XmsgImGroupCfgMisc::set_groupobjinfocached(::google::protobuf::uint32 value) {
  
  groupobjinfocached_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMisc.groupObjInfoCached)
}

// uint32 groupObjInfoLru = 8;
inline void XmsgImGroupCfgMisc::clear_groupobjinfolru() {
  groupobjinfolru_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImGroupCfgMisc::groupobjinfolru() const {
  // @@protoc_insertion_point(field_get:XmsgImGroupCfgMisc.groupObjInfoLru)
  return groupobjinfolru_;
}
inline void XmsgImGroupCfgMisc::set_groupobjinfolru(::google::protobuf::uint32 value) {
  
  groupobjinfolru_ = value;
  // @@protoc_insertion_point(field_set:XmsgImGroupCfgMisc.groupObjInfoLru)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cfg_2dx_2dmsg_2dim_2dgroup_2eproto__INCLUDED
