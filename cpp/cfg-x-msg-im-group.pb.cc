// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-im-group.proto

#include "cfg-x-msg-im-group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class XmsgImGroupCfgPbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImGroupCfgPb>
      _instance;
} _XmsgImGroupCfgPb_default_instance_;
class XmsgImGroupCfgMongodbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImGroupCfgMongodb>
      _instance;
} _XmsgImGroupCfgMongodb_default_instance_;
class XmsgImGroupCfgMysqlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImGroupCfgMysql>
      _instance;
} _XmsgImGroupCfgMysql_default_instance_;
class XmsgImGroupCfgLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImGroupCfgLog>
      _instance;
} _XmsgImGroupCfgLog_default_instance_;
class XmsgImGroupCfgXscTcpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImGroupCfgXscTcpServer>
      _instance;
} _XmsgImGroupCfgXscTcpServer_default_instance_;
class XmsgImGroupCfgXmsgNeH2nAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImGroupCfgXmsgNeH2nAddr>
      _instance;
} _XmsgImGroupCfgXmsgNeH2nAddr_default_instance_;
class XmsgImGroupCfgXmsgNeN2hAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImGroupCfgXmsgNeN2hAddr>
      _instance;
} _XmsgImGroupCfgXmsgNeN2hAddr_default_instance_;
class XmsgImGroupCfgMiscDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImGroupCfgMisc>
      _instance;
} _XmsgImGroupCfgMisc_default_instance_;
namespace protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto {
void InitDefaultsXmsgImGroupCfgPbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgMongodb();
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgMysql();
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgLog();
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgXscTcpServer();
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgXmsgNeH2nAddr();
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgXmsgNeN2hAddr();
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgMisc();
  {
    void* ptr = &::_XmsgImGroupCfgPb_default_instance_;
    new (ptr) ::XmsgImGroupCfgPb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImGroupCfgPb::InitAsDefaultInstance();
}

void InitDefaultsXmsgImGroupCfgPb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImGroupCfgPbImpl);
}

void InitDefaultsXmsgImGroupCfgMongodbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImGroupCfgMongodb_default_instance_;
    new (ptr) ::XmsgImGroupCfgMongodb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImGroupCfgMongodb::InitAsDefaultInstance();
}

void InitDefaultsXmsgImGroupCfgMongodb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImGroupCfgMongodbImpl);
}

void InitDefaultsXmsgImGroupCfgMysqlImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImGroupCfgMysql_default_instance_;
    new (ptr) ::XmsgImGroupCfgMysql();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImGroupCfgMysql::InitAsDefaultInstance();
}

void InitDefaultsXmsgImGroupCfgMysql() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImGroupCfgMysqlImpl);
}

void InitDefaultsXmsgImGroupCfgLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImGroupCfgLog_default_instance_;
    new (ptr) ::XmsgImGroupCfgLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImGroupCfgLog::InitAsDefaultInstance();
}

void InitDefaultsXmsgImGroupCfgLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImGroupCfgLogImpl);
}

void InitDefaultsXmsgImGroupCfgXscTcpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImGroupCfgXscTcpServer_default_instance_;
    new (ptr) ::XmsgImGroupCfgXscTcpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImGroupCfgXscTcpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgImGroupCfgXscTcpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImGroupCfgXscTcpServerImpl);
}

void InitDefaultsXmsgImGroupCfgXmsgNeH2nAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImGroupCfgXmsgNeH2nAddr_default_instance_;
    new (ptr) ::XmsgImGroupCfgXmsgNeH2nAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImGroupCfgXmsgNeH2nAddr::InitAsDefaultInstance();
}

void InitDefaultsXmsgImGroupCfgXmsgNeH2nAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImGroupCfgXmsgNeH2nAddrImpl);
}

void InitDefaultsXmsgImGroupCfgXmsgNeN2hAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImGroupCfgXmsgNeN2hAddr_default_instance_;
    new (ptr) ::XmsgImGroupCfgXmsgNeN2hAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImGroupCfgXmsgNeN2hAddr::InitAsDefaultInstance();
}

void InitDefaultsXmsgImGroupCfgXmsgNeN2hAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImGroupCfgXmsgNeN2hAddrImpl);
}

void InitDefaultsXmsgImGroupCfgMiscImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImGroupCfgMisc_default_instance_;
    new (ptr) ::XmsgImGroupCfgMisc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImGroupCfgMisc::InitAsDefaultInstance();
}

void InitDefaultsXmsgImGroupCfgMisc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImGroupCfgMiscImpl);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgPb, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgPb, cfgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgPb, mongodb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgPb, mysql_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgPb, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgPb, xsctcpcfg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgPb, h2n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgPb, n2h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgPb, misc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgPb, gts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgPb, uts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMongodb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMongodb, uri_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMysql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMysql, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMysql, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMysql, db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMysql, usr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMysql, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMysql, poolsize_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgLog, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgLog, output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, worker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, peerlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, peermtu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, peerrcvbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, peersndbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, lazyclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, tracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, heartbeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, n2hzombie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, n2htranstimeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, n2htracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, h2nreconn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXscTcpServer, h2ntranstimeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXmsgNeH2nAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXmsgNeH2nAddr, neg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXmsgNeH2nAddr, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXmsgNeH2nAddr, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXmsgNeH2nAddr, alg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXmsgNeH2nAddr, redundant_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXmsgNeN2hAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXmsgNeN2hAddr, neg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXmsgNeN2hAddr, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXmsgNeN2hAddr, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgXmsgNeN2hAddr, addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMisc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMisc, receivedmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMisc, groupmsgsavebatchsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMisc, verapplycount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMisc, hlr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMisc, groupmsgqueuelimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMisc, groupevnqueuelimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMisc, groupmembercountlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMisc, groupobjinfocached_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImGroupCfgMisc, groupobjinfolru_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::XmsgImGroupCfgPb)},
  { 16, -1, sizeof(::XmsgImGroupCfgMongodb)},
  { 22, -1, sizeof(::XmsgImGroupCfgMysql)},
  { 33, -1, sizeof(::XmsgImGroupCfgLog)},
  { 40, -1, sizeof(::XmsgImGroupCfgXscTcpServer)},
  { 59, -1, sizeof(::XmsgImGroupCfgXmsgNeH2nAddr)},
  { 69, -1, sizeof(::XmsgImGroupCfgXmsgNeN2hAddr)},
  { 78, -1, sizeof(::XmsgImGroupCfgMisc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImGroupCfgPb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImGroupCfgMongodb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImGroupCfgMysql_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImGroupCfgLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImGroupCfgXscTcpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImGroupCfgXmsgNeH2nAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImGroupCfgXmsgNeN2hAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImGroupCfgMisc_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cfg-x-msg-im-group.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030cfg-x-msg-im-group.proto\"\342\002\n\020XmsgImGro"
      "upCfgPb\022\013\n\003cgt\030\001 \001(\t\022\017\n\007cfgType\030\002 \001(\t\022\'\n"
      "\007mongodb\030\003 \001(\0132\026.XmsgImGroupCfgMongodb\022#"
      "\n\005mysql\030\004 \001(\0132\024.XmsgImGroupCfgMysql\022\037\n\003l"
      "og\030\005 \001(\0132\022.XmsgImGroupCfgLog\022.\n\txscTcpCf"
      "g\030\006 \001(\0132\033.XmsgImGroupCfgXscTcpServer\022)\n\003"
      "h2n\030\007 \003(\0132\034.XmsgImGroupCfgXmsgNeH2nAddr\022"
      ")\n\003n2h\030\010 \003(\0132\034.XmsgImGroupCfgXmsgNeN2hAd"
      "dr\022!\n\004misc\030\t \001(\0132\023.XmsgImGroupCfgMisc\022\013\n"
      "\003gts\030\n \001(\004\022\013\n\003uts\030\013 \001(\004\"$\n\025XmsgImGroupCf"
      "gMongodb\022\013\n\003uri\030\001 \001(\t\"n\n\023XmsgImGroupCfgM"
      "ysql\022\014\n\004host\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\n\n\002db\030\003"
      " \001(\t\022\013\n\003usr\030\004 \001(\t\022\020\n\010password\030\005 \001(\t\022\020\n\010p"
      "oolSize\030\006 \001(\r\"2\n\021XmsgImGroupCfgLog\022\r\n\005le"
      "vel\030\001 \001(\t\022\016\n\006output\030\002 \001(\t\"\251\002\n\032XmsgImGrou"
      "pCfgXscTcpServer\022\014\n\004addr\030\001 \001(\t\022\016\n\006worker"
      "\030\002 \001(\r\022\021\n\tpeerLimit\030\003 \001(\r\022\017\n\007peerMtu\030\004 \001"
      "(\r\022\022\n\npeerRcvBuf\030\005 \001(\r\022\022\n\npeerSndBuf\030\006 \001"
      "(\r\022\021\n\tlazyClose\030\007 \001(\r\022\017\n\007tracing\030\010 \001(\010\022\021"
      "\n\theartbeat\030\t \001(\r\022\021\n\tn2hZombie\030\n \001(\r\022\027\n\017"
      "n2hTransTimeout\030\013 \001(\r\022\022\n\nn2hTracing\030\014 \001("
      "\010\022\021\n\th2nReConn\030\r \001(\r\022\027\n\017h2nTransTimeout\030"
      "\016 \001(\r\"e\n\033XmsgImGroupCfgXmsgNeH2nAddr\022\013\n\003"
      "neg\030\001 \001(\t\022\014\n\004addr\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\022\013\n\003"
      "alg\030\004 \001(\t\022\021\n\tredundant\030\005 \001(\r\"R\n\033XmsgImGr"
      "oupCfgXmsgNeN2hAddr\022\013\n\003neg\030\001 \001(\t\022\013\n\003cgt\030"
      "\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\022\014\n\004addr\030\004 \001(\t\"\371\001\n\022Xms"
      "gImGroupCfgMisc\022\024\n\014receivedMode\030\001 \001(\r\022\035\n"
      "\025groupMsgSaveBatchSize\030\002 \001(\r\022\025\n\rverApply"
      "Count\030\003 \001(\r\022\013\n\003hlr\030\004 \001(\t\022\032\n\022groupMsgQueu"
      "eLimit\030\005 \001(\r\022\032\n\022groupEvnQueueLimit\030\t \001(\r"
      "\022\035\n\025groupMemberCountLimit\030\006 \001(\r\022\032\n\022group"
      "ObjInfoCached\030\007 \001(\r\022\027\n\017groupObjInfoLru\030\010"
      " \001(\rB\034\n\010x.msg.pbB\020XmsgImGroupCfgPbb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1362);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cfg-x-msg-im-group.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto

// ===================================================================

void XmsgImGroupCfgPb::InitAsDefaultInstance() {
  ::_XmsgImGroupCfgPb_default_instance_._instance.get_mutable()->mongodb_ = const_cast< ::XmsgImGroupCfgMongodb*>(
      ::XmsgImGroupCfgMongodb::internal_default_instance());
  ::_XmsgImGroupCfgPb_default_instance_._instance.get_mutable()->mysql_ = const_cast< ::XmsgImGroupCfgMysql*>(
      ::XmsgImGroupCfgMysql::internal_default_instance());
  ::_XmsgImGroupCfgPb_default_instance_._instance.get_mutable()->log_ = const_cast< ::XmsgImGroupCfgLog*>(
      ::XmsgImGroupCfgLog::internal_default_instance());
  ::_XmsgImGroupCfgPb_default_instance_._instance.get_mutable()->xsctcpcfg_ = const_cast< ::XmsgImGroupCfgXscTcpServer*>(
      ::XmsgImGroupCfgXscTcpServer::internal_default_instance());
  ::_XmsgImGroupCfgPb_default_instance_._instance.get_mutable()->misc_ = const_cast< ::XmsgImGroupCfgMisc*>(
      ::XmsgImGroupCfgMisc::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImGroupCfgPb::kCgtFieldNumber;
const int XmsgImGroupCfgPb::kCfgTypeFieldNumber;
const int XmsgImGroupCfgPb::kMongodbFieldNumber;
const int XmsgImGroupCfgPb::kMysqlFieldNumber;
const int XmsgImGroupCfgPb::kLogFieldNumber;
const int XmsgImGroupCfgPb::kXscTcpCfgFieldNumber;
const int XmsgImGroupCfgPb::kH2NFieldNumber;
const int XmsgImGroupCfgPb::kN2HFieldNumber;
const int XmsgImGroupCfgPb::kMiscFieldNumber;
const int XmsgImGroupCfgPb::kGtsFieldNumber;
const int XmsgImGroupCfgPb::kUtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImGroupCfgPb::XmsgImGroupCfgPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgPb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImGroupCfgPb)
}
XmsgImGroupCfgPb::XmsgImGroupCfgPb(const XmsgImGroupCfgPb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      h2n_(from.h2n_),
      n2h_(from.n2h_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  cfgtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cfgtype().size() > 0) {
    cfgtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfgtype_);
  }
  if (from.has_mongodb()) {
    mongodb_ = new ::XmsgImGroupCfgMongodb(*from.mongodb_);
  } else {
    mongodb_ = NULL;
  }
  if (from.has_mysql()) {
    mysql_ = new ::XmsgImGroupCfgMysql(*from.mysql_);
  } else {
    mysql_ = NULL;
  }
  if (from.has_log()) {
    log_ = new ::XmsgImGroupCfgLog(*from.log_);
  } else {
    log_ = NULL;
  }
  if (from.has_xsctcpcfg()) {
    xsctcpcfg_ = new ::XmsgImGroupCfgXscTcpServer(*from.xsctcpcfg_);
  } else {
    xsctcpcfg_ = NULL;
  }
  if (from.has_misc()) {
    misc_ = new ::XmsgImGroupCfgMisc(*from.misc_);
  } else {
    misc_ = NULL;
  }
  ::memcpy(&gts_, &from.gts_,
    static_cast<size_t>(reinterpret_cast<char*>(&uts_) -
    reinterpret_cast<char*>(&gts_)) + sizeof(uts_));
  // @@protoc_insertion_point(copy_constructor:XmsgImGroupCfgPb)
}

void XmsgImGroupCfgPb::SharedCtor() {
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mongodb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uts_) -
      reinterpret_cast<char*>(&mongodb_)) + sizeof(uts_));
  _cached_size_ = 0;
}

XmsgImGroupCfgPb::~XmsgImGroupCfgPb() {
  // @@protoc_insertion_point(destructor:XmsgImGroupCfgPb)
  SharedDtor();
}

void XmsgImGroupCfgPb::SharedDtor() {
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mongodb_;
  if (this != internal_default_instance()) delete mysql_;
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete xsctcpcfg_;
  if (this != internal_default_instance()) delete misc_;
}

void XmsgImGroupCfgPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImGroupCfgPb::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImGroupCfgPb& XmsgImGroupCfgPb::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgPb();
  return *internal_default_instance();
}

XmsgImGroupCfgPb* XmsgImGroupCfgPb::New(::google::protobuf::Arena* arena) const {
  XmsgImGroupCfgPb* n = new XmsgImGroupCfgPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImGroupCfgPb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImGroupCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  h2n_.Clear();
  n2h_.Clear();
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && mongodb_ != NULL) {
    delete mongodb_;
  }
  mongodb_ = NULL;
  if (GetArenaNoVirtual() == NULL && mysql_ != NULL) {
    delete mysql_;
  }
  mysql_ = NULL;
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
  if (GetArenaNoVirtual() == NULL && xsctcpcfg_ != NULL) {
    delete xsctcpcfg_;
  }
  xsctcpcfg_ = NULL;
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
  ::memset(&gts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uts_) -
      reinterpret_cast<char*>(&gts_)) + sizeof(uts_));
  _internal_metadata_.Clear();
}

bool XmsgImGroupCfgPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImGroupCfgPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cgt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgPb.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cfgType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfgtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cfgtype().data(), static_cast<int>(this->cfgtype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgPb.cfgType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImGroupCfgMongodb mongodb = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mongodb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImGroupCfgMysql mysql = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mysql()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImGroupCfgLog log = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImGroupCfgXscTcpServer xscTcpCfg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xsctcpcfg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgImGroupCfgXmsgNeH2nAddr h2n = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_h2n()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgImGroupCfgXmsgNeN2hAddr n2h = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_n2h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImGroupCfgMisc misc = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_misc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 gts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uts = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImGroupCfgPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImGroupCfgPb)
  return false;
#undef DO_
}

void XmsgImGroupCfgPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImGroupCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgPb.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cgt(), output);
  }

  // string cfgType = 2;
  if (this->cfgtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfgtype().data(), static_cast<int>(this->cfgtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgPb.cfgType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cfgtype(), output);
  }

  // .XmsgImGroupCfgMongodb mongodb = 3;
  if (this->has_mongodb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mongodb_, output);
  }

  // .XmsgImGroupCfgMysql mysql = 4;
  if (this->has_mysql()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mysql_, output);
  }

  // .XmsgImGroupCfgLog log = 5;
  if (this->has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->log_, output);
  }

  // .XmsgImGroupCfgXscTcpServer xscTcpCfg = 6;
  if (this->has_xsctcpcfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->xsctcpcfg_, output);
  }

  // repeated .XmsgImGroupCfgXmsgNeH2nAddr h2n = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->h2n_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->h2n(static_cast<int>(i)), output);
  }

  // repeated .XmsgImGroupCfgXmsgNeN2hAddr n2h = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->n2h(static_cast<int>(i)), output);
  }

  // .XmsgImGroupCfgMisc misc = 9;
  if (this->has_misc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->misc_, output);
  }

  // uint64 gts = 10;
  if (this->gts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->gts(), output);
  }

  // uint64 uts = 11;
  if (this->uts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->uts(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImGroupCfgPb)
}

::google::protobuf::uint8* XmsgImGroupCfgPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImGroupCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgPb.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cgt(), target);
  }

  // string cfgType = 2;
  if (this->cfgtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfgtype().data(), static_cast<int>(this->cfgtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgPb.cfgType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cfgtype(), target);
  }

  // .XmsgImGroupCfgMongodb mongodb = 3;
  if (this->has_mongodb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->mongodb_, deterministic, target);
  }

  // .XmsgImGroupCfgMysql mysql = 4;
  if (this->has_mysql()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->mysql_, deterministic, target);
  }

  // .XmsgImGroupCfgLog log = 5;
  if (this->has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->log_, deterministic, target);
  }

  // .XmsgImGroupCfgXscTcpServer xscTcpCfg = 6;
  if (this->has_xsctcpcfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->xsctcpcfg_, deterministic, target);
  }

  // repeated .XmsgImGroupCfgXmsgNeH2nAddr h2n = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->h2n_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->h2n(static_cast<int>(i)), deterministic, target);
  }

  // repeated .XmsgImGroupCfgXmsgNeN2hAddr n2h = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->n2h(static_cast<int>(i)), deterministic, target);
  }

  // .XmsgImGroupCfgMisc misc = 9;
  if (this->has_misc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->misc_, deterministic, target);
  }

  // uint64 gts = 10;
  if (this->gts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->gts(), target);
  }

  // uint64 uts = 11;
  if (this->uts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->uts(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImGroupCfgPb)
  return target;
}

size_t XmsgImGroupCfgPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImGroupCfgPb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .XmsgImGroupCfgXmsgNeH2nAddr h2n = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->h2n_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->h2n(static_cast<int>(i)));
    }
  }

  // repeated .XmsgImGroupCfgXmsgNeN2hAddr n2h = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->n2h_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->n2h(static_cast<int>(i)));
    }
  }

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string cfgType = 2;
  if (this->cfgtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfgtype());
  }

  // .XmsgImGroupCfgMongodb mongodb = 3;
  if (this->has_mongodb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mongodb_);
  }

  // .XmsgImGroupCfgMysql mysql = 4;
  if (this->has_mysql()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mysql_);
  }

  // .XmsgImGroupCfgLog log = 5;
  if (this->has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->log_);
  }

  // .XmsgImGroupCfgXscTcpServer xscTcpCfg = 6;
  if (this->has_xsctcpcfg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->xsctcpcfg_);
  }

  // .XmsgImGroupCfgMisc misc = 9;
  if (this->has_misc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->misc_);
  }

  // uint64 gts = 10;
  if (this->gts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gts());
  }

  // uint64 uts = 11;
  if (this->uts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImGroupCfgPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImGroupCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImGroupCfgPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImGroupCfgPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImGroupCfgPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImGroupCfgPb)
    MergeFrom(*source);
  }
}

void XmsgImGroupCfgPb::MergeFrom(const XmsgImGroupCfgPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImGroupCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  h2n_.MergeFrom(from.h2n_);
  n2h_.MergeFrom(from.n2h_);
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.cfgtype().size() > 0) {

    cfgtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfgtype_);
  }
  if (from.has_mongodb()) {
    mutable_mongodb()->::XmsgImGroupCfgMongodb::MergeFrom(from.mongodb());
  }
  if (from.has_mysql()) {
    mutable_mysql()->::XmsgImGroupCfgMysql::MergeFrom(from.mysql());
  }
  if (from.has_log()) {
    mutable_log()->::XmsgImGroupCfgLog::MergeFrom(from.log());
  }
  if (from.has_xsctcpcfg()) {
    mutable_xsctcpcfg()->::XmsgImGroupCfgXscTcpServer::MergeFrom(from.xsctcpcfg());
  }
  if (from.has_misc()) {
    mutable_misc()->::XmsgImGroupCfgMisc::MergeFrom(from.misc());
  }
  if (from.gts() != 0) {
    set_gts(from.gts());
  }
  if (from.uts() != 0) {
    set_uts(from.uts());
  }
}

void XmsgImGroupCfgPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImGroupCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImGroupCfgPb::CopyFrom(const XmsgImGroupCfgPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImGroupCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImGroupCfgPb::IsInitialized() const {
  return true;
}

void XmsgImGroupCfgPb::Swap(XmsgImGroupCfgPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImGroupCfgPb::InternalSwap(XmsgImGroupCfgPb* other) {
  using std::swap;
  h2n_.InternalSwap(&other->h2n_);
  n2h_.InternalSwap(&other->n2h_);
  cgt_.Swap(&other->cgt_);
  cfgtype_.Swap(&other->cfgtype_);
  swap(mongodb_, other->mongodb_);
  swap(mysql_, other->mysql_);
  swap(log_, other->log_);
  swap(xsctcpcfg_, other->xsctcpcfg_);
  swap(misc_, other->misc_);
  swap(gts_, other->gts_);
  swap(uts_, other->uts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImGroupCfgPb::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImGroupCfgMongodb::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImGroupCfgMongodb::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImGroupCfgMongodb::XmsgImGroupCfgMongodb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgMongodb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImGroupCfgMongodb)
}
XmsgImGroupCfgMongodb::XmsgImGroupCfgMongodb(const XmsgImGroupCfgMongodb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImGroupCfgMongodb)
}

void XmsgImGroupCfgMongodb::SharedCtor() {
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImGroupCfgMongodb::~XmsgImGroupCfgMongodb() {
  // @@protoc_insertion_point(destructor:XmsgImGroupCfgMongodb)
  SharedDtor();
}

void XmsgImGroupCfgMongodb::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImGroupCfgMongodb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImGroupCfgMongodb::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImGroupCfgMongodb& XmsgImGroupCfgMongodb::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgMongodb();
  return *internal_default_instance();
}

XmsgImGroupCfgMongodb* XmsgImGroupCfgMongodb::New(::google::protobuf::Arena* arena) const {
  XmsgImGroupCfgMongodb* n = new XmsgImGroupCfgMongodb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImGroupCfgMongodb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImGroupCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImGroupCfgMongodb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImGroupCfgMongodb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgMongodb.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImGroupCfgMongodb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImGroupCfgMongodb)
  return false;
#undef DO_
}

void XmsgImGroupCfgMongodb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImGroupCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgMongodb.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImGroupCfgMongodb)
}

::google::protobuf::uint8* XmsgImGroupCfgMongodb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImGroupCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgMongodb.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImGroupCfgMongodb)
  return target;
}

size_t XmsgImGroupCfgMongodb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImGroupCfgMongodb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImGroupCfgMongodb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImGroupCfgMongodb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImGroupCfgMongodb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImGroupCfgMongodb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImGroupCfgMongodb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImGroupCfgMongodb)
    MergeFrom(*source);
  }
}

void XmsgImGroupCfgMongodb::MergeFrom(const XmsgImGroupCfgMongodb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImGroupCfgMongodb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
}

void XmsgImGroupCfgMongodb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImGroupCfgMongodb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImGroupCfgMongodb::CopyFrom(const XmsgImGroupCfgMongodb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImGroupCfgMongodb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImGroupCfgMongodb::IsInitialized() const {
  return true;
}

void XmsgImGroupCfgMongodb::Swap(XmsgImGroupCfgMongodb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImGroupCfgMongodb::InternalSwap(XmsgImGroupCfgMongodb* other) {
  using std::swap;
  uri_.Swap(&other->uri_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImGroupCfgMongodb::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImGroupCfgMysql::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImGroupCfgMysql::kHostFieldNumber;
const int XmsgImGroupCfgMysql::kPortFieldNumber;
const int XmsgImGroupCfgMysql::kDbFieldNumber;
const int XmsgImGroupCfgMysql::kUsrFieldNumber;
const int XmsgImGroupCfgMysql::kPasswordFieldNumber;
const int XmsgImGroupCfgMysql::kPoolSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImGroupCfgMysql::XmsgImGroupCfgMysql()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgMysql();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImGroupCfgMysql)
}
XmsgImGroupCfgMysql::XmsgImGroupCfgMysql(const XmsgImGroupCfgMysql& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db().size() > 0) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usr().size() > 0) {
    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&poolsize_) -
    reinterpret_cast<char*>(&port_)) + sizeof(poolsize_));
  // @@protoc_insertion_point(copy_constructor:XmsgImGroupCfgMysql)
}

void XmsgImGroupCfgMysql::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poolsize_) -
      reinterpret_cast<char*>(&port_)) + sizeof(poolsize_));
  _cached_size_ = 0;
}

XmsgImGroupCfgMysql::~XmsgImGroupCfgMysql() {
  // @@protoc_insertion_point(destructor:XmsgImGroupCfgMysql)
  SharedDtor();
}

void XmsgImGroupCfgMysql::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImGroupCfgMysql::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImGroupCfgMysql::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImGroupCfgMysql& XmsgImGroupCfgMysql::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgMysql();
  return *internal_default_instance();
}

XmsgImGroupCfgMysql* XmsgImGroupCfgMysql::New(::google::protobuf::Arena* arena) const {
  XmsgImGroupCfgMysql* n = new XmsgImGroupCfgMysql;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImGroupCfgMysql::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImGroupCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poolsize_) -
      reinterpret_cast<char*>(&port_)) + sizeof(poolsize_));
  _internal_metadata_.Clear();
}

bool XmsgImGroupCfgMysql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImGroupCfgMysql)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgMysql.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db().data(), static_cast<int>(this->db().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgMysql.db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usr().data(), static_cast<int>(this->usr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgMysql.usr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgMysql.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 poolSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poolsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImGroupCfgMysql)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImGroupCfgMysql)
  return false;
#undef DO_
}

void XmsgImGroupCfgMysql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImGroupCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgMysql.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // string db = 3;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgMysql.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->db(), output);
  }

  // string usr = 4;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgMysql.usr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->usr(), output);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgMysql.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // uint32 poolSize = 6;
  if (this->poolsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->poolsize(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImGroupCfgMysql)
}

::google::protobuf::uint8* XmsgImGroupCfgMysql::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImGroupCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgMysql.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // string db = 3;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgMysql.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db(), target);
  }

  // string usr = 4;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgMysql.usr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->usr(), target);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgMysql.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // uint32 poolSize = 6;
  if (this->poolsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->poolsize(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImGroupCfgMysql)
  return target;
}

size_t XmsgImGroupCfgMysql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImGroupCfgMysql)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string db = 3;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db());
  }

  // string usr = 4;
  if (this->usr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->usr());
  }

  // string password = 5;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 poolSize = 6;
  if (this->poolsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->poolsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImGroupCfgMysql::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImGroupCfgMysql)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImGroupCfgMysql* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImGroupCfgMysql>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImGroupCfgMysql)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImGroupCfgMysql)
    MergeFrom(*source);
  }
}

void XmsgImGroupCfgMysql::MergeFrom(const XmsgImGroupCfgMysql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImGroupCfgMysql)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  if (from.usr().size() > 0) {

    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.poolsize() != 0) {
    set_poolsize(from.poolsize());
  }
}

void XmsgImGroupCfgMysql::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImGroupCfgMysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImGroupCfgMysql::CopyFrom(const XmsgImGroupCfgMysql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImGroupCfgMysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImGroupCfgMysql::IsInitialized() const {
  return true;
}

void XmsgImGroupCfgMysql::Swap(XmsgImGroupCfgMysql* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImGroupCfgMysql::InternalSwap(XmsgImGroupCfgMysql* other) {
  using std::swap;
  host_.Swap(&other->host_);
  db_.Swap(&other->db_);
  usr_.Swap(&other->usr_);
  password_.Swap(&other->password_);
  swap(port_, other->port_);
  swap(poolsize_, other->poolsize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImGroupCfgMysql::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImGroupCfgLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImGroupCfgLog::kLevelFieldNumber;
const int XmsgImGroupCfgLog::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImGroupCfgLog::XmsgImGroupCfgLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImGroupCfgLog)
}
XmsgImGroupCfgLog::XmsgImGroupCfgLog(const XmsgImGroupCfgLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.level().size() > 0) {
    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output().size() > 0) {
    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImGroupCfgLog)
}

void XmsgImGroupCfgLog::SharedCtor() {
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImGroupCfgLog::~XmsgImGroupCfgLog() {
  // @@protoc_insertion_point(destructor:XmsgImGroupCfgLog)
  SharedDtor();
}

void XmsgImGroupCfgLog::SharedDtor() {
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImGroupCfgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImGroupCfgLog::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImGroupCfgLog& XmsgImGroupCfgLog::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgLog();
  return *internal_default_instance();
}

XmsgImGroupCfgLog* XmsgImGroupCfgLog::New(::google::protobuf::Arena* arena) const {
  XmsgImGroupCfgLog* n = new XmsgImGroupCfgLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImGroupCfgLog::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImGroupCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImGroupCfgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImGroupCfgLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->level().data(), static_cast<int>(this->level().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgLog.level"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output().data(), static_cast<int>(this->output().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgLog.output"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImGroupCfgLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImGroupCfgLog)
  return false;
#undef DO_
}

void XmsgImGroupCfgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImGroupCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgLog.level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->level(), output);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgLog.output");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImGroupCfgLog)
}

::google::protobuf::uint8* XmsgImGroupCfgLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImGroupCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgLog.level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->level(), target);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgLog.output");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImGroupCfgLog)
  return target;
}

size_t XmsgImGroupCfgLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImGroupCfgLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string level = 1;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level());
  }

  // string output = 2;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImGroupCfgLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImGroupCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImGroupCfgLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImGroupCfgLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImGroupCfgLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImGroupCfgLog)
    MergeFrom(*source);
  }
}

void XmsgImGroupCfgLog::MergeFrom(const XmsgImGroupCfgLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImGroupCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level().size() > 0) {

    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  if (from.output().size() > 0) {

    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
}

void XmsgImGroupCfgLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImGroupCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImGroupCfgLog::CopyFrom(const XmsgImGroupCfgLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImGroupCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImGroupCfgLog::IsInitialized() const {
  return true;
}

void XmsgImGroupCfgLog::Swap(XmsgImGroupCfgLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImGroupCfgLog::InternalSwap(XmsgImGroupCfgLog* other) {
  using std::swap;
  level_.Swap(&other->level_);
  output_.Swap(&other->output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImGroupCfgLog::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImGroupCfgXscTcpServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImGroupCfgXscTcpServer::kAddrFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kWorkerFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kPeerLimitFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kPeerMtuFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kPeerRcvBufFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kPeerSndBufFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kLazyCloseFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kTracingFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kHeartbeatFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kN2HZombieFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kN2HTransTimeoutFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kN2HTracingFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kH2NReConnFieldNumber;
const int XmsgImGroupCfgXscTcpServer::kH2NTransTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImGroupCfgXscTcpServer::XmsgImGroupCfgXscTcpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgXscTcpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImGroupCfgXscTcpServer)
}
XmsgImGroupCfgXscTcpServer::XmsgImGroupCfgXscTcpServer(const XmsgImGroupCfgXscTcpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  ::memcpy(&worker_, &from.worker_,
    static_cast<size_t>(reinterpret_cast<char*>(&h2ntranstimeout_) -
    reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  // @@protoc_insertion_point(copy_constructor:XmsgImGroupCfgXscTcpServer)
}

void XmsgImGroupCfgXscTcpServer::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _cached_size_ = 0;
}

XmsgImGroupCfgXscTcpServer::~XmsgImGroupCfgXscTcpServer() {
  // @@protoc_insertion_point(destructor:XmsgImGroupCfgXscTcpServer)
  SharedDtor();
}

void XmsgImGroupCfgXscTcpServer::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImGroupCfgXscTcpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImGroupCfgXscTcpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImGroupCfgXscTcpServer& XmsgImGroupCfgXscTcpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgXscTcpServer();
  return *internal_default_instance();
}

XmsgImGroupCfgXscTcpServer* XmsgImGroupCfgXscTcpServer::New(::google::protobuf::Arena* arena) const {
  XmsgImGroupCfgXscTcpServer* n = new XmsgImGroupCfgXscTcpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImGroupCfgXscTcpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImGroupCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _internal_metadata_.Clear();
}

bool XmsgImGroupCfgXscTcpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImGroupCfgXscTcpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgXscTcpServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 worker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerMtu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peermtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerRcvBuf = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerrcvbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerSndBuf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peersndbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lazyClose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lazyclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tracing = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 heartbeat = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hZombie = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2hzombie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hTransTimeout = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2htranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool n2hTracing = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &n2htracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nReConn = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2nreconn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nTransTimeout = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2ntranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImGroupCfgXscTcpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImGroupCfgXscTcpServer)
  return false;
#undef DO_
}

void XmsgImGroupCfgXscTcpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImGroupCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXscTcpServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->worker(), output);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->peerlimit(), output);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peermtu(), output);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->peerrcvbuf(), output);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->peersndbuf(), output);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lazyclose(), output);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tracing(), output);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->heartbeat(), output);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->n2hzombie(), output);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->n2htranstimeout(), output);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->n2htracing(), output);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->h2nreconn(), output);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->h2ntranstimeout(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImGroupCfgXscTcpServer)
}

::google::protobuf::uint8* XmsgImGroupCfgXscTcpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImGroupCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXscTcpServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->worker(), target);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->peerlimit(), target);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peermtu(), target);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->peerrcvbuf(), target);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->peersndbuf(), target);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lazyclose(), target);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tracing(), target);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->heartbeat(), target);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->n2hzombie(), target);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->n2htranstimeout(), target);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->n2htracing(), target);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->h2nreconn(), target);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->h2ntranstimeout(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImGroupCfgXscTcpServer)
  return target;
}

size_t XmsgImGroupCfgXscTcpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImGroupCfgXscTcpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worker());
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerlimit());
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peermtu());
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerrcvbuf());
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peersndbuf());
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lazyclose());
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heartbeat());
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2hzombie());
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    total_size += 1 + 1;
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    total_size += 1 + 1;
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2htranstimeout());
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2nreconn());
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2ntranstimeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImGroupCfgXscTcpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImGroupCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImGroupCfgXscTcpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImGroupCfgXscTcpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImGroupCfgXscTcpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImGroupCfgXscTcpServer)
    MergeFrom(*source);
  }
}

void XmsgImGroupCfgXscTcpServer::MergeFrom(const XmsgImGroupCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImGroupCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.worker() != 0) {
    set_worker(from.worker());
  }
  if (from.peerlimit() != 0) {
    set_peerlimit(from.peerlimit());
  }
  if (from.peermtu() != 0) {
    set_peermtu(from.peermtu());
  }
  if (from.peerrcvbuf() != 0) {
    set_peerrcvbuf(from.peerrcvbuf());
  }
  if (from.peersndbuf() != 0) {
    set_peersndbuf(from.peersndbuf());
  }
  if (from.lazyclose() != 0) {
    set_lazyclose(from.lazyclose());
  }
  if (from.heartbeat() != 0) {
    set_heartbeat(from.heartbeat());
  }
  if (from.n2hzombie() != 0) {
    set_n2hzombie(from.n2hzombie());
  }
  if (from.tracing() != 0) {
    set_tracing(from.tracing());
  }
  if (from.n2htracing() != 0) {
    set_n2htracing(from.n2htracing());
  }
  if (from.n2htranstimeout() != 0) {
    set_n2htranstimeout(from.n2htranstimeout());
  }
  if (from.h2nreconn() != 0) {
    set_h2nreconn(from.h2nreconn());
  }
  if (from.h2ntranstimeout() != 0) {
    set_h2ntranstimeout(from.h2ntranstimeout());
  }
}

void XmsgImGroupCfgXscTcpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImGroupCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImGroupCfgXscTcpServer::CopyFrom(const XmsgImGroupCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImGroupCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImGroupCfgXscTcpServer::IsInitialized() const {
  return true;
}

void XmsgImGroupCfgXscTcpServer::Swap(XmsgImGroupCfgXscTcpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImGroupCfgXscTcpServer::InternalSwap(XmsgImGroupCfgXscTcpServer* other) {
  using std::swap;
  addr_.Swap(&other->addr_);
  swap(worker_, other->worker_);
  swap(peerlimit_, other->peerlimit_);
  swap(peermtu_, other->peermtu_);
  swap(peerrcvbuf_, other->peerrcvbuf_);
  swap(peersndbuf_, other->peersndbuf_);
  swap(lazyclose_, other->lazyclose_);
  swap(heartbeat_, other->heartbeat_);
  swap(n2hzombie_, other->n2hzombie_);
  swap(tracing_, other->tracing_);
  swap(n2htracing_, other->n2htracing_);
  swap(n2htranstimeout_, other->n2htranstimeout_);
  swap(h2nreconn_, other->h2nreconn_);
  swap(h2ntranstimeout_, other->h2ntranstimeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImGroupCfgXscTcpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImGroupCfgXmsgNeH2nAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImGroupCfgXmsgNeH2nAddr::kNegFieldNumber;
const int XmsgImGroupCfgXmsgNeH2nAddr::kAddrFieldNumber;
const int XmsgImGroupCfgXmsgNeH2nAddr::kPwdFieldNumber;
const int XmsgImGroupCfgXmsgNeH2nAddr::kAlgFieldNumber;
const int XmsgImGroupCfgXmsgNeH2nAddr::kRedundantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImGroupCfgXmsgNeH2nAddr::XmsgImGroupCfgXmsgNeH2nAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgXmsgNeH2nAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImGroupCfgXmsgNeH2nAddr)
}
XmsgImGroupCfgXmsgNeH2nAddr::XmsgImGroupCfgXmsgNeH2nAddr(const XmsgImGroupCfgXmsgNeH2nAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  alg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alg().size() > 0) {
    alg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alg_);
  }
  redundant_ = from.redundant_;
  // @@protoc_insertion_point(copy_constructor:XmsgImGroupCfgXmsgNeH2nAddr)
}

void XmsgImGroupCfgXmsgNeH2nAddr::SharedCtor() {
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redundant_ = 0u;
  _cached_size_ = 0;
}

XmsgImGroupCfgXmsgNeH2nAddr::~XmsgImGroupCfgXmsgNeH2nAddr() {
  // @@protoc_insertion_point(destructor:XmsgImGroupCfgXmsgNeH2nAddr)
  SharedDtor();
}

void XmsgImGroupCfgXmsgNeH2nAddr::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImGroupCfgXmsgNeH2nAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImGroupCfgXmsgNeH2nAddr::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImGroupCfgXmsgNeH2nAddr& XmsgImGroupCfgXmsgNeH2nAddr::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgXmsgNeH2nAddr();
  return *internal_default_instance();
}

XmsgImGroupCfgXmsgNeH2nAddr* XmsgImGroupCfgXmsgNeH2nAddr::New(::google::protobuf::Arena* arena) const {
  XmsgImGroupCfgXmsgNeH2nAddr* n = new XmsgImGroupCfgXmsgNeH2nAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImGroupCfgXmsgNeH2nAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImGroupCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redundant_ = 0u;
  _internal_metadata_.Clear();
}

bool XmsgImGroupCfgXmsgNeH2nAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImGroupCfgXmsgNeH2nAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgXmsgNeH2nAddr.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgXmsgNeH2nAddr.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgXmsgNeH2nAddr.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alg().data(), static_cast<int>(this->alg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgXmsgNeH2nAddr.alg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 redundant = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redundant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImGroupCfgXmsgNeH2nAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImGroupCfgXmsgNeH2nAddr)
  return false;
#undef DO_
}

void XmsgImGroupCfgXmsgNeH2nAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImGroupCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeH2nAddr.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeH2nAddr.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addr(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeH2nAddr.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alg().data(), static_cast<int>(this->alg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeH2nAddr.alg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->alg(), output);
  }

  // uint32 redundant = 5;
  if (this->redundant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->redundant(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImGroupCfgXmsgNeH2nAddr)
}

::google::protobuf::uint8* XmsgImGroupCfgXmsgNeH2nAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImGroupCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeH2nAddr.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeH2nAddr.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeH2nAddr.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alg().data(), static_cast<int>(this->alg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeH2nAddr.alg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alg(), target);
  }

  // uint32 redundant = 5;
  if (this->redundant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->redundant(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImGroupCfgXmsgNeH2nAddr)
  return target;
}

size_t XmsgImGroupCfgXmsgNeH2nAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImGroupCfgXmsgNeH2nAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alg());
  }

  // uint32 redundant = 5;
  if (this->redundant() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->redundant());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImGroupCfgXmsgNeH2nAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImGroupCfgXmsgNeH2nAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImGroupCfgXmsgNeH2nAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImGroupCfgXmsgNeH2nAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImGroupCfgXmsgNeH2nAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImGroupCfgXmsgNeH2nAddr)
    MergeFrom(*source);
  }
}

void XmsgImGroupCfgXmsgNeH2nAddr::MergeFrom(const XmsgImGroupCfgXmsgNeH2nAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImGroupCfgXmsgNeH2nAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.alg().size() > 0) {

    alg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alg_);
  }
  if (from.redundant() != 0) {
    set_redundant(from.redundant());
  }
}

void XmsgImGroupCfgXmsgNeH2nAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImGroupCfgXmsgNeH2nAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImGroupCfgXmsgNeH2nAddr::CopyFrom(const XmsgImGroupCfgXmsgNeH2nAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImGroupCfgXmsgNeH2nAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImGroupCfgXmsgNeH2nAddr::IsInitialized() const {
  return true;
}

void XmsgImGroupCfgXmsgNeH2nAddr::Swap(XmsgImGroupCfgXmsgNeH2nAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImGroupCfgXmsgNeH2nAddr::InternalSwap(XmsgImGroupCfgXmsgNeH2nAddr* other) {
  using std::swap;
  neg_.Swap(&other->neg_);
  addr_.Swap(&other->addr_);
  pwd_.Swap(&other->pwd_);
  alg_.Swap(&other->alg_);
  swap(redundant_, other->redundant_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImGroupCfgXmsgNeH2nAddr::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImGroupCfgXmsgNeN2hAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImGroupCfgXmsgNeN2hAddr::kNegFieldNumber;
const int XmsgImGroupCfgXmsgNeN2hAddr::kCgtFieldNumber;
const int XmsgImGroupCfgXmsgNeN2hAddr::kPwdFieldNumber;
const int XmsgImGroupCfgXmsgNeN2hAddr::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImGroupCfgXmsgNeN2hAddr::XmsgImGroupCfgXmsgNeN2hAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgXmsgNeN2hAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImGroupCfgXmsgNeN2hAddr)
}
XmsgImGroupCfgXmsgNeN2hAddr::XmsgImGroupCfgXmsgNeN2hAddr(const XmsgImGroupCfgXmsgNeN2hAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImGroupCfgXmsgNeN2hAddr)
}

void XmsgImGroupCfgXmsgNeN2hAddr::SharedCtor() {
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImGroupCfgXmsgNeN2hAddr::~XmsgImGroupCfgXmsgNeN2hAddr() {
  // @@protoc_insertion_point(destructor:XmsgImGroupCfgXmsgNeN2hAddr)
  SharedDtor();
}

void XmsgImGroupCfgXmsgNeN2hAddr::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImGroupCfgXmsgNeN2hAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImGroupCfgXmsgNeN2hAddr::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImGroupCfgXmsgNeN2hAddr& XmsgImGroupCfgXmsgNeN2hAddr::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgXmsgNeN2hAddr();
  return *internal_default_instance();
}

XmsgImGroupCfgXmsgNeN2hAddr* XmsgImGroupCfgXmsgNeN2hAddr::New(::google::protobuf::Arena* arena) const {
  XmsgImGroupCfgXmsgNeN2hAddr* n = new XmsgImGroupCfgXmsgNeN2hAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImGroupCfgXmsgNeN2hAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImGroupCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImGroupCfgXmsgNeN2hAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImGroupCfgXmsgNeN2hAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgXmsgNeN2hAddr.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cgt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgXmsgNeN2hAddr.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgXmsgNeN2hAddr.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgXmsgNeN2hAddr.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImGroupCfgXmsgNeN2hAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImGroupCfgXmsgNeN2hAddr)
  return false;
#undef DO_
}

void XmsgImGroupCfgXmsgNeN2hAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImGroupCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeN2hAddr.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeN2hAddr.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cgt(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeN2hAddr.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeN2hAddr.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImGroupCfgXmsgNeN2hAddr)
}

::google::protobuf::uint8* XmsgImGroupCfgXmsgNeN2hAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImGroupCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeN2hAddr.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeN2hAddr.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cgt(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeN2hAddr.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgXmsgNeN2hAddr.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImGroupCfgXmsgNeN2hAddr)
  return target;
}

size_t XmsgImGroupCfgXmsgNeN2hAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImGroupCfgXmsgNeN2hAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImGroupCfgXmsgNeN2hAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImGroupCfgXmsgNeN2hAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImGroupCfgXmsgNeN2hAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImGroupCfgXmsgNeN2hAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImGroupCfgXmsgNeN2hAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImGroupCfgXmsgNeN2hAddr)
    MergeFrom(*source);
  }
}

void XmsgImGroupCfgXmsgNeN2hAddr::MergeFrom(const XmsgImGroupCfgXmsgNeN2hAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImGroupCfgXmsgNeN2hAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void XmsgImGroupCfgXmsgNeN2hAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImGroupCfgXmsgNeN2hAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImGroupCfgXmsgNeN2hAddr::CopyFrom(const XmsgImGroupCfgXmsgNeN2hAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImGroupCfgXmsgNeN2hAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImGroupCfgXmsgNeN2hAddr::IsInitialized() const {
  return true;
}

void XmsgImGroupCfgXmsgNeN2hAddr::Swap(XmsgImGroupCfgXmsgNeN2hAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImGroupCfgXmsgNeN2hAddr::InternalSwap(XmsgImGroupCfgXmsgNeN2hAddr* other) {
  using std::swap;
  neg_.Swap(&other->neg_);
  cgt_.Swap(&other->cgt_);
  pwd_.Swap(&other->pwd_);
  addr_.Swap(&other->addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImGroupCfgXmsgNeN2hAddr::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImGroupCfgMisc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImGroupCfgMisc::kReceivedModeFieldNumber;
const int XmsgImGroupCfgMisc::kGroupMsgSaveBatchSizeFieldNumber;
const int XmsgImGroupCfgMisc::kVerApplyCountFieldNumber;
const int XmsgImGroupCfgMisc::kHlrFieldNumber;
const int XmsgImGroupCfgMisc::kGroupMsgQueueLimitFieldNumber;
const int XmsgImGroupCfgMisc::kGroupEvnQueueLimitFieldNumber;
const int XmsgImGroupCfgMisc::kGroupMemberCountLimitFieldNumber;
const int XmsgImGroupCfgMisc::kGroupObjInfoCachedFieldNumber;
const int XmsgImGroupCfgMisc::kGroupObjInfoLruFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImGroupCfgMisc::XmsgImGroupCfgMisc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgMisc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImGroupCfgMisc)
}
XmsgImGroupCfgMisc::XmsgImGroupCfgMisc(const XmsgImGroupCfgMisc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hlr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hlr().size() > 0) {
    hlr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hlr_);
  }
  ::memcpy(&receivedmode_, &from.receivedmode_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupevnqueuelimit_) -
    reinterpret_cast<char*>(&receivedmode_)) + sizeof(groupevnqueuelimit_));
  // @@protoc_insertion_point(copy_constructor:XmsgImGroupCfgMisc)
}

void XmsgImGroupCfgMisc::SharedCtor() {
  hlr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&receivedmode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupevnqueuelimit_) -
      reinterpret_cast<char*>(&receivedmode_)) + sizeof(groupevnqueuelimit_));
  _cached_size_ = 0;
}

XmsgImGroupCfgMisc::~XmsgImGroupCfgMisc() {
  // @@protoc_insertion_point(destructor:XmsgImGroupCfgMisc)
  SharedDtor();
}

void XmsgImGroupCfgMisc::SharedDtor() {
  hlr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImGroupCfgMisc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImGroupCfgMisc::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImGroupCfgMisc& XmsgImGroupCfgMisc::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::InitDefaultsXmsgImGroupCfgMisc();
  return *internal_default_instance();
}

XmsgImGroupCfgMisc* XmsgImGroupCfgMisc::New(::google::protobuf::Arena* arena) const {
  XmsgImGroupCfgMisc* n = new XmsgImGroupCfgMisc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImGroupCfgMisc::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImGroupCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hlr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&receivedmode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupevnqueuelimit_) -
      reinterpret_cast<char*>(&receivedmode_)) + sizeof(groupevnqueuelimit_));
  _internal_metadata_.Clear();
}

bool XmsgImGroupCfgMisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImGroupCfgMisc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 receivedMode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivedmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 groupMsgSaveBatchSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupmsgsavebatchsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 verApplyCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verapplycount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hlr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hlr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hlr().data(), static_cast<int>(this->hlr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImGroupCfgMisc.hlr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 groupMsgQueueLimit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupmsgqueuelimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 groupMemberCountLimit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupmembercountlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 groupObjInfoCached = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupobjinfocached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 groupObjInfoLru = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupobjinfolru_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 groupEvnQueueLimit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupevnqueuelimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImGroupCfgMisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImGroupCfgMisc)
  return false;
#undef DO_
}

void XmsgImGroupCfgMisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImGroupCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 receivedMode = 1;
  if (this->receivedmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->receivedmode(), output);
  }

  // uint32 groupMsgSaveBatchSize = 2;
  if (this->groupmsgsavebatchsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupmsgsavebatchsize(), output);
  }

  // uint32 verApplyCount = 3;
  if (this->verapplycount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->verapplycount(), output);
  }

  // string hlr = 4;
  if (this->hlr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hlr().data(), static_cast<int>(this->hlr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgMisc.hlr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hlr(), output);
  }

  // uint32 groupMsgQueueLimit = 5;
  if (this->groupmsgqueuelimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->groupmsgqueuelimit(), output);
  }

  // uint32 groupMemberCountLimit = 6;
  if (this->groupmembercountlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->groupmembercountlimit(), output);
  }

  // uint32 groupObjInfoCached = 7;
  if (this->groupobjinfocached() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->groupobjinfocached(), output);
  }

  // uint32 groupObjInfoLru = 8;
  if (this->groupobjinfolru() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->groupobjinfolru(), output);
  }

  // uint32 groupEvnQueueLimit = 9;
  if (this->groupevnqueuelimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->groupevnqueuelimit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImGroupCfgMisc)
}

::google::protobuf::uint8* XmsgImGroupCfgMisc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImGroupCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 receivedMode = 1;
  if (this->receivedmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->receivedmode(), target);
  }

  // uint32 groupMsgSaveBatchSize = 2;
  if (this->groupmsgsavebatchsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupmsgsavebatchsize(), target);
  }

  // uint32 verApplyCount = 3;
  if (this->verapplycount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->verapplycount(), target);
  }

  // string hlr = 4;
  if (this->hlr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hlr().data(), static_cast<int>(this->hlr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImGroupCfgMisc.hlr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hlr(), target);
  }

  // uint32 groupMsgQueueLimit = 5;
  if (this->groupmsgqueuelimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->groupmsgqueuelimit(), target);
  }

  // uint32 groupMemberCountLimit = 6;
  if (this->groupmembercountlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->groupmembercountlimit(), target);
  }

  // uint32 groupObjInfoCached = 7;
  if (this->groupobjinfocached() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->groupobjinfocached(), target);
  }

  // uint32 groupObjInfoLru = 8;
  if (this->groupobjinfolru() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->groupobjinfolru(), target);
  }

  // uint32 groupEvnQueueLimit = 9;
  if (this->groupevnqueuelimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->groupevnqueuelimit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImGroupCfgMisc)
  return target;
}

size_t XmsgImGroupCfgMisc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImGroupCfgMisc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hlr = 4;
  if (this->hlr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hlr());
  }

  // uint32 receivedMode = 1;
  if (this->receivedmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->receivedmode());
  }

  // uint32 groupMsgSaveBatchSize = 2;
  if (this->groupmsgsavebatchsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->groupmsgsavebatchsize());
  }

  // uint32 verApplyCount = 3;
  if (this->verapplycount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verapplycount());
  }

  // uint32 groupMsgQueueLimit = 5;
  if (this->groupmsgqueuelimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->groupmsgqueuelimit());
  }

  // uint32 groupMemberCountLimit = 6;
  if (this->groupmembercountlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->groupmembercountlimit());
  }

  // uint32 groupObjInfoCached = 7;
  if (this->groupobjinfocached() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->groupobjinfocached());
  }

  // uint32 groupObjInfoLru = 8;
  if (this->groupobjinfolru() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->groupobjinfolru());
  }

  // uint32 groupEvnQueueLimit = 9;
  if (this->groupevnqueuelimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->groupevnqueuelimit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImGroupCfgMisc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImGroupCfgMisc)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImGroupCfgMisc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImGroupCfgMisc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImGroupCfgMisc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImGroupCfgMisc)
    MergeFrom(*source);
  }
}

void XmsgImGroupCfgMisc::MergeFrom(const XmsgImGroupCfgMisc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImGroupCfgMisc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hlr().size() > 0) {

    hlr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hlr_);
  }
  if (from.receivedmode() != 0) {
    set_receivedmode(from.receivedmode());
  }
  if (from.groupmsgsavebatchsize() != 0) {
    set_groupmsgsavebatchsize(from.groupmsgsavebatchsize());
  }
  if (from.verapplycount() != 0) {
    set_verapplycount(from.verapplycount());
  }
  if (from.groupmsgqueuelimit() != 0) {
    set_groupmsgqueuelimit(from.groupmsgqueuelimit());
  }
  if (from.groupmembercountlimit() != 0) {
    set_groupmembercountlimit(from.groupmembercountlimit());
  }
  if (from.groupobjinfocached() != 0) {
    set_groupobjinfocached(from.groupobjinfocached());
  }
  if (from.groupobjinfolru() != 0) {
    set_groupobjinfolru(from.groupobjinfolru());
  }
  if (from.groupevnqueuelimit() != 0) {
    set_groupevnqueuelimit(from.groupevnqueuelimit());
  }
}

void XmsgImGroupCfgMisc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImGroupCfgMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImGroupCfgMisc::CopyFrom(const XmsgImGroupCfgMisc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImGroupCfgMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImGroupCfgMisc::IsInitialized() const {
  return true;
}

void XmsgImGroupCfgMisc::Swap(XmsgImGroupCfgMisc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImGroupCfgMisc::InternalSwap(XmsgImGroupCfgMisc* other) {
  using std::swap;
  hlr_.Swap(&other->hlr_);
  swap(receivedmode_, other->receivedmode_);
  swap(groupmsgsavebatchsize_, other->groupmsgsavebatchsize_);
  swap(verapplycount_, other->verapplycount_);
  swap(groupmsgqueuelimit_, other->groupmsgqueuelimit_);
  swap(groupmembercountlimit_, other->groupmembercountlimit_);
  swap(groupobjinfocached_, other->groupobjinfocached_);
  swap(groupobjinfolru_, other->groupobjinfolru_);
  swap(groupevnqueuelimit_, other->groupevnqueuelimit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImGroupCfgMisc::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dgroup_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
